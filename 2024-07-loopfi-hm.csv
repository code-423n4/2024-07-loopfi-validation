issue,title,primary finding,validator comment,status,root cause (URL),size
validation-639,Missing `disableInitializers` Call in Proxy Upgradeable Contract Constructor,validation-189,insufficient submission but valid - chainlinkoracle is included in the bot report so OOS,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/oracle/PendleLPOracle.sol#L56,22
validation-602,`CDPVault#liquidatePosition()` doesn't provide slippage protection on liquidated collateral,validation-411,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L509,23
findings-23,_notifyReward in `MultiFeeDistribution.sol` will skip reward periods causing loss for users,validation-765,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/reward/MultiFeeDistribution.sol#L500-L504,24
findings-24,Users who turn ineligible will have their pending rewards stuck,findings-24,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/reward/ChefIncentivesController.sol#L520,24
findings-31,Missing staleness checks in `AuraVault.sol`,validation-459,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/4f508781a49ffa53511e7e5ed6cda0ff0eb5bdc5/src/vendor/AuraVault.sol#L365-L379,24
validation-120,`ChainlinkOracle::_authorizeUpgrade` doesn't check the status of the oracle before upgrade,validation-228,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/oracle/ChainlinkOracle.sol#L70,24
validation-215,`ChainlinkOracle::_fetchAndValidate` will return incorrect price when underlying aggregator reaches `minAnswer`,validation-727,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/oracle/ChainlinkOracle.sol#L96-L110,24
findings-34,PoolAction.sol will not return unused amounts to from address,validation-237,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/PoolAction.sol#L75-L111,25
validation-121,`PendleLPOracle::_fetchAndValidate` uses Chainlink's deprecated `answeredInRound`,validation-121,"while the WatchPug´s [WP-L12] answeredInRound is deprecated refers only to ChainlinkOracle.sol, the submission refers to another codeblock - primary",Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/oracle/PendleLPOracle.sol#L120,25
validation-160,"Pendle swap lacks deadline check, making it vulnerable to front-running",findings-71,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/SwapAction.sol#L135-L137,25
validation-436,Vault inflation attack in `AuraVault`,validation-485,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/vendor/AuraVault.sol#L199,25
validation-625,`AuraVault` is not functional because no one is allowed to update its configuration ,validation-448,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/vendor/AuraVault.sol#L120-L135,26
validation-216,`AuraVault::_chainlinkSpot` has integration issues where it might return stale or incorrect results,validation-42,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/4f508781a49ffa53511e7e5ed6cda0ff0eb5bdc5/src/vendor/AuraVault.sol#L365-L379,27
validation-231,"When PoolV3 is paused, borrowers will not be able to repay their loan by calling `CDPVault.repay()`, this will unfairly lead to interest accumulation and can lead to unfair liquidation once unpaused",validation-231,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/PoolV3.sol#L537,28
validation-45,Griefing of last user withdrawal from StakingLPEth vault,validation-187,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/StakingLPEth.sol#L141-L144,28
findings-18,New pools can get tokens that were accumulated before they were added,findings-103,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/reward/ChefIncentivesController.sol#L304,29
validation-225, `PendleLPOracle::_fetchAndValidate` will return incorrect latest price data from chainlink,validation-121,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/oracle/PendleLPOracle.sol#L120,29
validation-230,ChainlinkOracle does not check if the returned price is outside the min/max range for the token,validation-727,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/oracle/ChainlinkOracle.sol#L96-L110,29
validation-411,No slippage protection upon liquidating,validation-411,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L509,29
validation-413,Insufficient validation allows users to flashloan and bypass `increaseLever()`,validation-413,primary -it looks like one can arbitrarily swap a position by encoding leverParams.position but it´s not referred in the submission,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/PositionAction.sol#L379,29
validation-469, Inconsistent Emission Schedule Updates in ChefIncentivesController,validation-284,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/reward/ChefIncentivesController.sol#L439-L447,29
findings-102,Treasury withdrawals also incur fees,findings-102,"primary - validating this just to ensure the treasury is not calling this - else, it should be a multisig anyways",Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/PoolV3.sol#L419-L423,45
validation-591,Last user might not withdraw all their `lpETH` from `StakingLPEth`,validation-187,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/StakingLPEth.sol#L141-L144,29
validation-679,Lack of stale price check can result in users being able to claim more rewards than the deposited WETH.,validation-459,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/4f508781a49ffa53511e7e5ed6cda0ff0eb5bdc5/src/vendor/AuraVault.sol#L365-L379,29
findings-21,An infinite loop in `MultifeeDistribution.sol` exit() function,findings-21,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/reward/MultiFeeDistribution.sol#L1006,30
validation-614,AuraVault is open to early inflation attacks,validation-485,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/vendor/AuraVault.sol#L199,30
validation-682,CDPVault : deposit : `whenNotPaused` can be bypassed by directly calling the `modifyCollateralAndDebt`,validation-325,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L223-L249,30
validation-770,Attacker can prevent users from depositing.,validation-323,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/TransferAction.sol#L65-L77,30
validation-611,BalancerOracle's totalSupply utilization is not correct in all cases,validation-648, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/oracle/BalancerOracle.sol#L135,31
validation-623, A user cannot claim their previously pending reward once they become ineligible,findings-24,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/reward/ChefIncentivesController.sol#L520,31
findings-104,Emission schedule is not followed,findings-104,primary - shares common features with validation-549 but 549 does not mention block.timestamp,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/reward/ChefIncentivesController.sol#L989,57
validation-670,Roles not set,validation-448,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/vendor/AuraVault.sol#L120-L135,31
validation-671,Chainlink communication not correct,validation-727,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/oracle/ChainlinkOracle.sol#L96-L110,31
findings-105,Multiple functions don't check for emission schedule update,findings-105,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/reward/ChefIncentivesController.sol#L318,32
validation-650,`borrow()` missing whenNotPaused,validation-421,no drainage but its agains the no token out mechanism during pause,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/CDPVault.sol#L256-L264,32
validation-485,AuraVault.sol is vulnerable to first depositor inflation attack,validation-485,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/vendor/AuraVault.sol#L199,33
validation-539,lastDebtUpdate should be block.timestamp instead ,validation-9,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L318,33
validation-779,Wrong debt accouting in liquidatePosition(),validation-360,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L509-L526,33
validation-178,"StakingLPEth locks an excessive amount of lpETH to prevent the inflation attack, this can lead to loss of funds/DOS in edge cases",validation-187,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/StakingLPEth.sol#L141-L144,34
validation-184,The deposit and withdraw functions are meant to be pausable but an attacker can easily bypass this by directly calling modifyCollateralAndDebt() function to deposit/withdraw,validation-325,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L223-L249,34
validation-305,pause functionality can be bypassed in CDPVault via modifyCollateralAndDebt(),validation-325,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L223-L249,34
validation-659,Not account for unclaimed rewards in contract `AuraVault`,validation-262, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/vendor/AuraVault.sol#L175-L177,34
validation-713,Wrong check used for determining bad debt,findings-60,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L509-L527,34
findings-110,Repay deposits different amount than what is received from a swap,findings-110,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/PositionAction.sol#L575-L589,52
findings-98,DOS on bad debt liquidations by increasing the collateral,validation-719,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L599,35
validation-431,Honest users could be permanently DOS'd from withdrawing their vested tokens/rewards,validation-431,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/reward/ChefIncentivesController.sol#L518,35
validation-437,ChainlinkOracle.sol::spot() function will return the wrong price if the price of a token is outside the min/max range of the Chainlink Oracle that is used,validation-727,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/oracle/ChainlinkOracle.sol#L96-L110,35
validation-511,"Malicious users can put protocol in a bad state when the vault is paused, potentially causing a bank run",validation-421,withdraw has whennotpaused modifier btw,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/CDPVault.sol#L256-L264,35
findings-113,Altered debt in the position can cause lost tokens,findings-113,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/PositionAction.sol#L584-L590,92
findings-117,`PositionActionPendle` needs predefined amount which cannot be accurately calculated,findings-86,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/PositionActionPendle.sol#L61-L65,60
findings-33,Vault inflation attack in AuraVault.sol,validation-485,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/vendor/AuraVault.sol#L199,36
findings-119,Flashloan cannot be obtained to delever during high utilization times,findings-119,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/PositionAction.sol#L345-L369,79
validation-706,`PendleLPOracle._fetchAndValidate()` function using the deprecated chainlink  variable `answeredInRound` ,validation-121,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/oracle/PendleLPOracle.sol#L120,36
validation-617,`CDPVault#liquidatePosition()` doesn't provide slippage protection on liquidated collateral,validation-411,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L509,37
validation-719,Front-running liquidation of bad debt positions to block liquidations,validation-719,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L599,37
findings-14,Frontrunning `registerRewardDeposit` could cause problems with the reward distribution,validation-43,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/4f508781a49ffa53511e7e5ed6cda0ff0eb5bdc5/src/reward/ChefIncentivesController.sol#L921-L922,38
findings-120,Immutable `MIN_SHARES` requirement can cause final withdrawers to loose assets ,validation-187,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/StakingLPEth.sol#L141-L144,47
validation-420,Users Will Get Liquidated By MEV Bots as Soon as PoolV3 is Unpaused Because `PoolV3::repayCreditAccount` Has the `whenNotPaused` Modifier,validation-231,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/PoolV3.sol#L537,38
findings-121,Usage of `lastEligibleStatus` can cause user to miss out on rewards on `manualStopEmissionsFor` invocation,findings-121,primary - looks like it´s the intended mechanism,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/reward/ChefIncentivesController.sol#L605-L608,64
findings-17,CDPVault::_modifyPosition will revert if a rewardController is utilised,findings-17,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/CDPVault.sol#L335-L337,51
findings-118,`actualSupply` should be used instead of `totalSupply` to value BP,validation-648, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/oracle/BalancerOracle.sol#L135,39
validation-593,StakingLPEth ERC4626 inflation attack,validation-593,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/StakingLPEth.sol#L141,39
findings-19,Directly sending dust token amount will slow down distribution in `MultiFeeDistribution.sol`,findings-19,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/reward/MultiFeeDistribution.sol#L1208,50
findings-27,`manualStopEmissionsFor` in ChefIncentiveController calculates outdated pending rewards,findings-121, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/reward/ChefIncentivesController.sol#L605-L608,45
findings-63,Liquidation penalty is not acquired for bad-debt liquidation.,validation-363,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L529-L532,40
findings-35,The `Refer` event in `PoolV3` can be manipulated,findings-35,primary - QA without a h/m risk,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/PoolV3.sol#L248-L255,65
validation-684,Unauthorized Access to Deposit and Withdraw Functions When Contract is Paused,validation-325,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L223-L249,40
validation-147,The Chainlink's `latestRoundData` price feed can return stale or incorrect results.,validation-459,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/4f508781a49ffa53511e7e5ed6cda0ff0eb5bdc5/src/vendor/AuraVault.sol#L365-L379,41
validation-261,No fall back for price feeds oracle if Chainlink's aggregators fails.,validation-148,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L590,41
validation-330,Deprecated return value from chainlink is used,validation-121,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/oracle/PendleLPOracle.sol#L120,41
validation-358,Malicious attacker can prevent last user from withdrawing MIN_SHARES in StakingLPEth.sol,validation-187,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/StakingLPEth.sol#L141-L144,41
validation-421,"In `CDPVault` Users can Borrow During Pauses but Liquidators cannot Liquidate, Allowing Users To Open Positions Which Might Become Bad Debt But Cannot be Liquidated",validation-421,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/CDPVault.sol#L256-L264,41
validation-675,Price return from chainlink is not validated completely,validation-459,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/4f508781a49ffa53511e7e5ed6cda0ff0eb5bdc5/src/vendor/AuraVault.sol#L365-L379,41
findings-39,Lack of mechanism to evenly distribute losses from bad debt might cause some users to be unable to withdraw their deposits in full amount,validation-418, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/PoolV3.sol#L429-L439,294
findings-4,Unclear Bad debt conditions will cause loss for the protocol,findings-60,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L509-L527,97
validation-307,Inconsistent bad debt check between liquidatePosition() and liquidatePositionBadDebt(),findings-60,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L509-L527,42
validation-310,Last staker may lose MIN_SHARES funds in StakingLPEth,validation-187,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/StakingLPEth.sol#L141-L144,42
findings-42,PositionAction20._onWithdraw and PositionPendle20._onWithdraw also returns token amount in wrong scale,findings-42,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/proxy/PositionAction20.sol#L50-L52,84
validation-641,Last user can not exit vault due to checking condition of `_checkMinShares()` function in `StakingLPEth` contract,validation-187,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/StakingLPEth.sol#L141-L144,42
validation-407,Bad price staleness check in the AuraVault,validation-459,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/4f508781a49ffa53511e7e5ed6cda0ff0eb5bdc5/src/vendor/AuraVault.sol#L365-L379,43
findings-43,CDPVault missing mechanism for handling $PENDLE incentive from PendleLP could lead to reward getting stuck in CDPVault forever,findings-43,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/CDPVault.sol#L1-L762,35
validation-568,Incorrect Liquidity Delta Calculation in repayCreditAccount Function,validation-441,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/PoolV3.sol#L567,43
validation-676,Use `msg.sender` instead of `from` for transferAndSwap().,validation-233, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/proxy/TransferAction.sol#L46-L81,43
validation-716,Liquidator could receive less collateral than expected,validation-411,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L509,43
findings-92,Pause functionality is bypassed by calling `modifyCollateralAndDebt` directly,validation-325,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L223-L249,44
validation-742,Inconsistent checking for bad debt,findings-60,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L509-L527,44
findings-47,EligibilityDataProvider uses incorrect price to convert user's total debt value to USD could lead underestimation of `requiredUsdValue`,validation-588, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/reward/EligibilityDataProvider.sol#L187,49
findings-49,Attacker can abuse `_checkMinShares` by manipulaing `MIN_SHARES` price to prevent other users from withdrawing their staked lpETH,validation-187,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/StakingLPEth.sol#L141-L144,169
validation-366,Partial liquidation leading to bad debts,validation-732,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L532,45
validation-587,The modification in isWhitelisted within ChefIncentivesController.sol contains a logical error.,validation-65,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/reward/ChefIncentivesController.sol#L813-L842,45
validation-749,Lack of slippage control in `_deposit` Function,validation-435,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/PoolV3.sol#L384,45
validation-475,`PoolAction.transferAndJoin()` can be used to steal token from user make approval to `PoolAction` contract directly instead of through `PRBProxy`,validation-237,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/PoolAction.sol#L75-L111,46
validation-577,AuraVault ERC4626 inflation attack,validation-485,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/vendor/AuraVault.sol#L199,46
findings-50,"`EligibilityDataProvider.sol#requiredUsdValue()` calculates an incorrect value, leading to incorrect eligibility evaluations for users.",validation-588, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/reward/EligibilityDataProvider.sol#L187,83
validation-754,Wrong calculation of newCumulativeIndex in case of partial borrowing interest repayment,validation-347,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L707,46
findings-55,`Flashlender.sol#flashLoan()` should use `mintProfit()` to mint fees. The current implemetation may lead to locked up WETH in PoolV3.,findings-55,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/Flashlender.sol#L106,140
findings-13,rawReward does not account for the claimed rewards,validation-549,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/reward/ChefIncentivesController.sol#L988-L994,47
findings-58,Liquidation penalty should be taken from liquidator instead of from position.,findings-58,primary - could also be root cause of validation-363 as this submission details more,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/CDPVault.sol#L529-L531,132
validation-491,The inflation attack to the  AuraVault ,validation-485,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/vendor/AuraVault.sol#L199,47
findings-62,It is nearly impossble for Liquidators to use `liquidatePosition()` to fully pay off a non bad-debt position.,findings-62,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/CDPVault.sol#L545,108
findings-112,`permit2` approval is made to incorrect address,validation-603, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/TransferAction.sol#L69,48
findings-65,Attackers can deposit 1wei of lpETH in StakingLPEth and lock 1e16 lpETH of other users.,validation-187,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/StakingLPEth.sol#L141-L144,69
findings-66,StakingLPEth user's `cooldownEnd` does not update with `cooldownDuration`,validation-513,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/StakingLPEth.sol#L92,80
validation-406,absence of access control in `AuraVault`,validation-448,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/vendor/AuraVault.sol#L120-L135,48
validation-763,Lack of Slippage Protection in liquidatePosition function,validation-411,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L509,48
findings-20,An infinite loop in `MultiFeeDistribution.sol`  withdraw,findings-20,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/reward/MultiFeeDistribution.sol#L555,49
findings-32,Wrong redeem accounting in `AuraVault.sol`,validation-492,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/vendor/AuraVault.sol#L256,49
findings-70,`SwapAction.sol#balancerSwap` does not support native ETH as input token.,findings-70,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/proxy/SwapAction.sol#L263,124
validation-228,The _authorizeUpgrade() function in the ChainlinkOracle contract does not check the status of the oracle like it is supposed to,validation-228,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/oracle/ChainlinkOracle.sol#L70,49
findings-77,MultiFeeDistribution.sol relock period and multiplier determinted by `defaultLockIndex` may be different to what user initially set up.,findings-77,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/reward/MultiFeeDistribution.sol#L1370,88
validation-59,`AuraVault::_chainlinkSpot` can result in stale prices,validation-459,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/4f508781a49ffa53511e7e5ed6cda0ff0eb5bdc5/src/vendor/AuraVault.sol#L365-L379,49
validation-732,Partial liquidations and price changes can block  liquidations,validation-732,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L532,49
findings-78,"MultiFeeDistribution.sol aggregates unlockTime by AGGREGATION_EPOCH, which may end up locking tokens for another 6 days.",findings-78,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/reward/MultiFeeDistribution.sol#L1112,90
findings-8,Wrong logic in _updatePool will cause stuck rewards and loss for users,validation-549,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/reward/ChefIncentivesController.sol#L988-L994,55
validation-601,transferAndJoin at the PoolAction contract lacks access control,validation-237,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/PoolAction.sol#L75-L111,50
findings-80,`PositionAction4626.sol#_onDeposit` should deposit into `position` CDPVault position instead of `address(this)`.,findings-80,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/proxy/PositionAction4626.sol#L52,74
validation-321,Incorrect reward distribution in `AuraVault.sol`,validation-321,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/4f508781a49ffa53511e7e5ed6cda0ff0eb5bdc5/src/vendor/AuraVault.sol#L301-L303,51
findings-81,`PositionAction4626.sol#_onWithdraw` should withdraw from `position` CDPVault position instead of `address(this)`.,findings-81,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/proxy/PositionAction4626.sol#L62,70
validation-405,User accumulates the full interest of the loan when partially repaying/liquidating a loan ,validation-347,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L707,51
validation-412,Dust positions can be left out or unexpected reverts can occur upon liquidations,validation-732,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L532,51
validation-752,Chainlink can return stale price in `AuraVault::_chainlinkSpot()` and `AuraVault::_getAuraSpot()`,validation-459,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/4f508781a49ffa53511e7e5ed6cda0ff0eb5bdc5/src/vendor/AuraVault.sol#L365-L379,51
validation-760,Potential for ETH to be Locked in Contract When Joining Balancer Pools,findings-69, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/proxy/PoolAction.sol#L142-L152,51
findings-84,`PositionAction.sol#_repay` should repay `amount` amount of tokens when conducting a swap.,findings-110, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/PositionAction.sol#L575-L589,114
validation-223,"CDPVault.liquidatePosition() calculates ```deltaDebt``` and ```penalty``` wrongly, as a result, either the liquidator or the protocol will lose funds.  ",validation-223,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L530-L531,52
findings-86,`PositionActionPendle.sol#IncreaseLever` may have leftover tokens in PositionAction.sol,findings-86,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/PositionActionPendle.sol#L61-L65,132
validation-681,PoolV3's interest rate breaks if credit account is repaid with profit,validation-441,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/PoolV3.sol#L567,52
validation-772,`BalancerOracle::update()` can return stale price,validation-772,has a valid part but it´s unlikely - kind of inflated,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/oracle/BalancerOracle.sol#L114-L136,52
findings-64,Positions can be immediately liquidated after repayments resume.,validation-231,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/PoolV3.sol#L537,53
findings-91,Overlap in liquidation eligibility criteria in `CDPVault` liquidation functions may lead to increased protocol losses from bad debt  ,findings-60,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L509-L527,242
findings-93,Debt position interest can round in favour of the user and not the pool leading to lower interest repayment,findings-93,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L478,186
validation-576,No permissions are set in AuraVault,validation-448,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/vendor/AuraVault.sol#L120-L135,53
validation-646,BalancerOracle: Oracle manipulation via missing Balancer Vault read-only reentrancy check.,validation-192, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/oracle/BalancerOracle.sol#L120-L121,53
findings-106,`_newRewards` checks with total rewards instead of specific pool reward,validation-549,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/reward/ChefIncentivesController.sol#L988-L994,54
validation-210,Borrowers can bypass pause mechanism to deposit and withdraw in a paused state ,validation-325,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L223-L249,54
validation-424,Last Withdrawer(s) Will Not Be Able to Withdraw Full Deposit From `StakingLPEth`,validation-187,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/StakingLPEth.sol#L141-L144,54
findings-94,Token scaling allows to inject precision to gain assets,findings-94,primary ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L437-L445,59
validation-573,DoS due to Inflation Attack,validation-485,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/vendor/AuraVault.sol#L199,54
findings-95,Debt position interest is compounded while pool interest is simple causing inconsistency b/w `expectedLiquidity_` and `availableLiquidity_`,findings-95,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L478,199
findings-45,Excessive Borrowing Risk: Paused Liquidations May Lead to Bad Debt,validation-421,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/CDPVault.sol#L256-L264,55
findings-96,loss/profit accounting is done incorrectly inside `liquidatePositionBadDebt`,findings-96,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L607-L624,89
validation-314,Frontrun transferAndJoin() to steal the victim's funds,validation-237,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/PoolAction.sol#L75-L111,55
validation-473,The calculation of tokenOut in the PositionActionPendle::_onDecreaseLever() function is incorrect.## Links to affected code,validation-544,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/PositionActionPendle.sol#L76-L91,55
validation-497,The increaseLever function can revert because of the double deposit into the CDP vault,validation-50,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/proxy/PositionAction4626.sol#L129,55
findings-97,Rounding can cause excess `quotaRevenueChange` to remain in pool accruing interest till the next epoch,findings-97,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/PoolV3.sol#L736-L738,138
validation-474,Typo in `PoolV3.repayCreditAccount()`. `convertToShares` and `_convertToShares`,validation-605,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/PoolV3.sol#L549-L553,56
validation-697,PoolV3's redeem is cheaper than withdraw,validation-697,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/PoolV3.sol#L306,56
validation-123,"`CDPVault::_modifyPosition` always checks debt floor, possibly blocking users from withdrawing their collateral",validation-445, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/CDPVault.sol#L321,76
findings-107,`_newRewards` uses block.timestamp instead of endtime for reward calculation always,findings-75,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/reward/ChefIncentivesController.sol#L874,57
validation-606,PoolAction:transferAndJoin doesn't return the excess tokens back to the caller (from argument) on Pendle joins,validation-606,primary - looks like a user err,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/PoolAction.sol#L159,57
validation-648,BalancerOracle uses wrong supply value to compute price,validation-648,primary ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/oracle/BalancerOracle.sol#L135,57
validation-226,BalancerOracle.update() uses the hugely inaccurate totalSupply() function when calculating the balancer LP token price which will lead to an inaccurate price for all non-legacy pools,validation-648, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/oracle/BalancerOracle.sol#L135,58
validation-128, Using TWAP Instead of Spot Price (Potential Oracle Failure + Inaccurate Liquidations),validation-509, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L448,132
validation-255,Users can borrow when CDPVault.sol is paused,validation-421,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/CDPVault.sol#L256-L264,59
validation-139,CDPVault.sol: Temporary DOS on Positions with Accrued Interest,validation-347,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L707,165
validation-152,No incentive to write off bad debt when remaining collateral is very small,validation-512, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L256,62
validation-655,Wrong formula for BalancerOracle price calculation,findings-59, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/oracle/BalancerOracle.sol#L114,59
validation-157,"CDPVault will hold a lot of Pendle LP tokens as collateral, which will generate PENDLE incentives and reward tokens BUT the vault does not have a method to redeem these rewards",findings-43, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/CDPVault.sol#L1-L762,42
findings-25,"PoolV3::withdraw doesn't have slippage checked, but withdraw has adjustable withdrawal fee",validation-435,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/PoolV3.sol#L384,60
validation-470,Lack of Slippage Protection in `CDPVault::liquidatePosition`,validation-411,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L509,60
validation-159,Wrong slippage amount used in `SwapAction::swap` for `PENDLE_OUT` swaps,validation-159,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/proxy/SwapAction.sol#L137,157
validation-665,Incorrect Use of convertToShares Instead of Custom _convertToShares in `repayCreditAccount` Function,validation-605,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/PoolV3.sol#L549-L553,60
validation-757,Inaccurate Interest Accrual Due to block.number Usage,validation-9,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L318,60
validation-379,`BalancerOracle#spot()` returns non-spot price,validation-379,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/oracle/BalancerOracle.sol#L158-L164,61
validation-756,No Circuit-Breaker checks in `ChainlinkOracle.sol`,validation-727,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/oracle/ChainlinkOracle.sol#L96-L110,61
findings-10,`pendingRewards` in ChefIncentiveController.sol will return wrong values,findings-75,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/reward/ChefIncentivesController.sol#L874,62
findings-88,`AuraVault.sol` `_chainlinkSpot()` and `_getAuraSpot()` does not check for stale results.,validation-459,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/4f508781a49ffa53511e7e5ed6cda0ff0eb5bdc5/src/vendor/AuraVault.sol#L365-L379,62
validation-177,"Users that initially cooldown a portion of their shares, then later cooldown some more shares will wrongly update the cooldownEnd for all their shares",validation-432, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/StakingLPEth.sol#L104-L114,42
findings-101,Normal liquidation can be performed during bad debt periods resulting in leftover debts,validation-732,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L532,63
validation-163,Bad UUPSUpgradeable pattern in `ChainlinkOracle` will prevent initialization of future upgrades,validation-228,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/oracle/ChainlinkOracle.sol#L70,63
validation-580,The 0.01ETH share of the last user cannot be withdrawn,validation-187,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/StakingLPEth.sol#L141-L144,63
validation-652,Decreasing position leverage fails because unable to repay credit flashloan fee,validation-396,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/PositionAction.sol#L364,63
validation-688,`AuraVault::_chainlinkSpot` and `AuraVault::_getAuraSpot` function might return out-of-date prices,validation-459,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/4f508781a49ffa53511e7e5ed6cda0ff0eb5bdc5/src/vendor/AuraVault.sol#L365-L379,63
validation-183,Attackers can frontrun reward accumulation in the StakingLPEth contract to steal rewards unfairly from users currently in the pool,validation-183,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/StakingLPEth.sol#L8,105
findings-48,Positions are not liquidatable when `collateral * spotPrice * liquidationDiscount >= debt > collateral * spotPrice`,findings-60,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L509-L527,64
findings-60,"`liquidatePosition()` can be called when bad debt occurs, allowing users to liquidate a debt partially, which is unexpected.",findings-60,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L509-L527,64
findings-67,BalancerOracle should use getActualSupply() instead of totalSupply(),validation-648, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/oracle/BalancerOracle.sol#L135,64
findings-7,Profitable self liquidation when in bad debt,findings-7,"primary - actually as long as the liquidation is succeeded, it should be ok as the protocol loses anyway unless there is a hate for the bad debt owner and they should not be rewarded again(!)",Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/4f508781a49ffa53511e7e5ed6cda0ff0eb5bdc5/src/CDPVault.sol#L606,64
validation-115,Anyone can deposit/withdraw when `CDPVault` is Paused,validation-325,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L223-L249,64
validation-153,ChainlinkOracle.sol#spot() function will return wrong price when prices drop to minAnswer,validation-727,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/oracle/ChainlinkOracle.sol#L96-L110,64
validation-195,"Lack of `whenNotPaused` modifier in `CDPVault::_modifyPosition`, `CDPVault::modifyCollateralAndDebt`, `CDPVault::borrow` could cause protocol to accumulate bad debt.",validation-325,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L223-L249,64
validation-186,There is no method to remove `Quota Token` from `PoolQuotaKeeperV3` ,validation-186,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/quotas/PoolQuotaKeeperV3.sol#L135-L153,128
validation-188,"The flash loan fee is never accounted in `PoolV3::expectedLiquidity`, which may cause lenders to incur a loss",findings-55, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/Flashlender.sol#L106,217
validation-206,Collateral Tokens with less than 18 Decimals break liquidation logic ,validation-229, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L509-L574,105
validation-607,The current bounds for liquidation make the protocol subject to bad debt liquidations earlier than it should,findings-60,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L509-L527,65
findings-111,`decreaseLever` doesn't repay the fee,validation-396,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/PositionAction.sol#L364,66
validation-257,Incorrect Calculation of Liquidation Penalty and Debt Repayment Will Lead to Financial Discrepancies (`CDPVault::liquidatePosition`),validation-223,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L530-L531,66
validation-520,"Functions in CDPVault.sol without modifier ```onlyRegisteredVault```, users are still able to deposit and borrow in a removed vault",validation-520,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L223,66
validation-542,"When liquidation is paused, user can still borrow fund out to create bad debt.",validation-421,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/CDPVault.sol#L256-L264,66
findings-83,`PositionAction4626.sol#_onDecreaseLever` should send back unused poolTokens if exitPool is used.,validation-75,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/PositionAction4626.sol#L61-L62,67
findings-85,`PositionAction.sol#_deposit` incorrectly checks `auxSwap.assetIn` should be equal to `collateralParams.targetToken`.,findings-85,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/PositionAction.sol#L512,67
validation-192,BalancerOracle.sol is vulnerable to Balancer read-only reentrancy issue.,validation-192,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/oracle/BalancerOracle.sol#L120-L121,67
validation-320,increaseLever() will not work for PositionAction4626,validation-50,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/proxy/PositionAction4626.sol#L129,67
validation-435,Depositing/withdrawing in the pool is done without any slippage protection,validation-435,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/PoolV3.sol#L384,67
findings-103,Add pool doesn't update the rewards before allocation is changed,findings-103,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/reward/ChefIncentivesController.sol#L304,68
findings-59,BalancerOracle calculates BPT price incorrectly,findings-59,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/oracle/BalancerOracle.sol#L114,68
findings-68,ChainlinkOracle and PendleLPOracle does not handle minAnswer/maxAnswer circuit breakers,validation-727,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/oracle/ChainlinkOracle.sol#L96-L110,68
validation-40,[M-01] ChainlinkOracle::_fetchAndValidate will use incorrect price when underlying aggregator reaches minAnswer or maxAnswer,validation-727,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/oracle/ChainlinkOracle.sol#L96-L110,68
validation-604,PoolAction:transferAndJoin doesn't return the excess tokens back to the caller on Balancer joins,validation-604,primary ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/PoolAction.sol#L128,68
validation-605,`PoolV3#repayCreditAccount()` use incorrect share converting function to calculate profit and loss,validation-605,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/PoolV3.sol#L549-L553,68
validation-668,Frontrun permit,validation-323,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/TransferAction.sol#L65-L77,68
validation-702,Improper Handling of ETH and WETH in Balancer Pool Join Function,findings-69, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/proxy/PoolAction.sol#L142-L152,68
validation-715,Chainlink’s latestRoundData might return stale or wrong results,validation-459,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/4f508781a49ffa53511e7e5ed6cda0ff0eb5bdc5/src/vendor/AuraVault.sol#L365-L379,68
validation-218,Removing vault from VaultRegistry leads to under accounting of outstanding debt from users,validation-518,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/VaultRegistry.sol#L49-L55,71
findings-38,Lack of slippage check while interacting with ERC4626 Vault in `PositionAction4626` could lead to users' fund loss,findings-38,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/proxy/PositionAction4626.sol#L41-L53,69
validation-117,Incorrect Reward Updates for Scheduled Emissions.,validation-284,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/reward/ChefIncentivesController.sol#L439-L447,69
validation-262,"Unclaimed Rewards Handling Issue in `AuraVault` Contract Functions (`AuraVault::deposit`, `AuraVault::mint`, `AuraVault::withdraw`, `AuraVault::redeem`)",validation-262,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/vendor/AuraVault.sol#L175-L177,69
validation-222,Inadequate Initiator Validation in `onFlashLoan()` Function,validation-689, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/Flashlender.sol#L87,83
validation-325,WhenNotPaused modifier in the CDPVault can be bypassed by users,validation-325,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L223-L249,69
validation-229,"CDPVault.liquidatePosition() does not scale ```takeCollateral``` with ```tokenScale``, therefore, it might send the wrong amount of collateral to the liquidator when tokenScale ! = 1 ether. ",validation-229,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L509-L574,271
validation-236,attackers may lock users' funds once they expire.,validation-236,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/reward/MultiFeeDistribution.sol#L1351-L1381,119
validation-654,In `CDPVault.sol` Position might be liquidated right after taking maximal debt according to collateral deposited for it,validation-654,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L453,69
findings-115,`auxSwap` within `decreaseLever` can lead to loosing portion of residual tokens,findings-87, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/PositionAction.sol#L475-L482,70
validation-241,StakingLPEth.sol: Malicious Users Can Brick Deposit Functionality through Donation Attack,validation-187,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/StakingLPEth.sol#L141-L144,67
validation-47,"If Chainlink price feed answer is a negative value, wrong price will be used",validation-727,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/oracle/ChainlinkOracle.sol#L96-L110,70
validation-26,"Wrong repayment amount used in `PositionAction::_repay`, forcing users to unexpectedly lose funds",findings-110, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/PositionAction.sol#L575-L589,213
validation-260,Users can extend cooldown period indefinitely (`StakingLPEth::cooldownAssets` and `StakingLPEth::cooldownShares`),validation-432, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/StakingLPEth.sol#L104-L114,80
validation-265,Incorrect Assumption of Ordered Array in `lastEligibleTime` Function Can Lead to Incorrect Eligibility Timestamp (`EligibilityDataProvider::lastEligibleTime`),validation-265,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/reward/EligibilityDataProvider.sol#L220-L241,97
validation-416,Users can bypass the pause modifier in CDPVault.deposit and withdraw by directly calling modifyCollateralAndDebt,validation-325,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L223-L249,71
validation-481,AuraVault.sol::_chainlinkSpot() may fetch outdated price,validation-459,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/4f508781a49ffa53511e7e5ed6cda0ff0eb5bdc5/src/vendor/AuraVault.sol#L365-L379,71
validation-27,CDPVault Contract: Withdrawals and Deposits Not Pausable as Intended,validation-325,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L223-L249,103
validation-155,The protocol does not handle the case where ptOracle is not initialized for the required twapWindow in PendleLPOracle.sol,validation-155,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/oracle/PendleLPOracle.sol#L137-L149,72
validation-360,"liquidationDiscount will make position worse off than before, and may even invite bad debt.",validation-360,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L509-L526,72
validation-423,AuraVault `_chainlinkSpot` and `_getAuraSpot` Can Provide Stale Prices,validation-459,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/4f508781a49ffa53511e7e5ed6cda0ff0eb5bdc5/src/vendor/AuraVault.sol#L365-L379,72
validation-283,Malicious user can withdraw full rewards without penalties (`MultiFeeDistribution::individualEarlyExit`),validation-283,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/reward/MultiFeeDistribution.sol#L618-L640,97
validation-501,Liquidation makes the position unhealthier,validation-360,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L509-L526,72
validation-285,Malicious users can manipulate quota rates through multiple votes within the same epoch (`GaugeV3::_vote()`),validation-285,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/quotas/GaugeV3.sol#L126-L137,147
validation-287,Incorrect fee calculation leads to financial discrepancies for users (`PoolV3::withdraw` and `PoolV3::redeem`),validation-287,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/PoolV3.sol#L292-L309,111
findings-61,"CDPVault's `deposit()` and `withdraw()` function is not available when paused, but users can bypass this by calling `modifyCollateralAndDebt()` directly.",validation-325,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L223-L249,73
validation-100,"`PoolAction::transferAndJoin` doesn't return residual amounts to the user when joining a Balancer pool, forcing user's funds to be stuck forever",validation-604,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/PoolAction.sol#L128,73
validation-190,Missing staleness check when trying to fetch the price from chainlink in AuraVault,validation-459,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/4f508781a49ffa53511e7e5ed6cda0ff0eb5bdc5/src/vendor/AuraVault.sol#L365-L379,73
validation-214,`Transferaction::_transferFrom` is vulnerable via DOS if the approval type is `PERMIT`,validation-323,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/TransferAction.sol#L65-L77,73
validation-597,Liquidating positions may make its health factor worse than before and target the position to bigger than expected liquidations,validation-360,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L509-L526,73
validation-651,Users can claim more rewards than the corresponding deposited WETH,validation-459,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/4f508781a49ffa53511e7e5ed6cda0ff0eb5bdc5/src/vendor/AuraVault.sol#L365-L379,73
validation-137,Missing to invoke `convertToShares` first when function `mintProfit` invoking `_mint`,validation-137,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/PoolV3.sol#L900,74
validation-42,Chainlink price feed `updatedAt` timestamp not validated for price staleness in AuraVault.sol ,validation-459,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/4f508781a49ffa53511e7e5ed6cda0ff0eb5bdc5/src/vendor/AuraVault.sol#L365-L379,74
validation-472,"In AuraVault, AccessControl is not initialized.",validation-448,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/vendor/AuraVault.sol#L120-L135,74
validation-268,Incorrect Token Transfer Calculation in `EXACT_OUT` Swaps May Lead to Financial Discrepancies (`SwapAction::swap`),validation-268,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/SwapAction.sol#L140-L142,75
validation-306,Not all entry points calling PendleRouter::addLiquiditySingleToken() accepts native tokens,validation-306,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/PoolAction.sol#L75-L110,88
findings-53,"`PoolV3.sol` withdraw fees are sent to `StakingLPEth.sol` contract as WETH, which is not accessible.",findings-53,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/PoolV3.sol#L419-L423,76
findings-6,AuraVault::_getAuraSpot doesn't perform safety checks on chainlink answer,validation-727,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/oracle/ChainlinkOracle.sol#L96-L110,76
validation-309,Improper bad debt process in PoolV3,validation-418, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/PoolV3.sol#L429-L439,71
validation-329,BalancerOracle is not applicable for some pools.,validation-329,primary - also subject to fallback oracle issue: validation-148,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/oracle/BalancerOracle.sol#L114-L136,76
validation-311,Inconsistent decimal handling,validation-229, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L509-L574,69
validation-628,profit is ignored for in update base interest when repay credit,validation-441,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/PoolV3.sol#L567,76
validation-312,BalancerOracle does not apply for pools which's token number is larger than 3.,validation-312,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/oracle/BalancerOracle.sol#L165-L173,59
findings-73,TransferAction.sol ERC20Permit call should be wrapped in try-catch to avoid grief attacks.,validation-323,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/TransferAction.sol#L65-L77,77
validation-319,Incorrect deposit/withdraw position in PositionAction4626,findings-80, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/proxy/PositionAction4626.sol#L52,59
validation-324,Incorrect liquidation process will make liquidations impossible to repay and protocol take the amount that is intended for repaying debt instead of penalty amount,validation-223,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L530-L531,122
validation-385,Lack of Access Control for AuraVault,validation-448,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/vendor/AuraVault.sol#L120-L135,77
validation-516,Chainlink oracle will return the wrong price if the aggregator hits `minAnswer`,validation-727,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/oracle/ChainlinkOracle.sol#L96-L110,77
validation-686,`PositionAction4626::_onDecreaseLever()` delegate call leads to theft of funds,validation-686,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/PositionAction4626.sol#L136-L155,77
validation-327,Increasing leverage with flashloan is not done correctly,validation-327,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/4f508781a49ffa53511e7e5ed6cda0ff0eb5bdc5/src/proxy/PositionAction20.sol#L70,92
findings-3,Liquidations can decrease a position's health,validation-360,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L509-L526,78
findings-76,`ChefIncentivesController.sol#addPool` should also call `_massUpdatePools()` since allocPoints have changed. ,findings-103,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/reward/ChefIncentivesController.sol#L304,78
validation-392,"In the PoolV3::repayCreditAccount() function, the calculation of expectedLiquidityDelta is incorrect.",validation-441,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/PoolV3.sol#L567,78
validation-428,AuraVault is vulnerable to the first depositor attack due to a `0` decimalsOffset,validation-485,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/vendor/AuraVault.sol#L199,78
validation-492,There is a calculation error in AuraVault::redeem().,validation-492,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/vendor/AuraVault.sol#L256,78
validation-590,Users interacting with `TransferAction::_transferFrom` via `SwapAction` and `PoolAction` with approval type `permit` can lose their funds.,validation-323,different consequences tho,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/TransferAction.sol#L65-L77,78
validation-333,Improper repay amount in PositionAction,findings-110, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/PositionAction.sol#L575-L589,47
validation-322,Incorrect return value from _onDecreaseLever() in PositionActionPendle if users don't use leverParams.auxAction,validation-544,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/PositionActionPendle.sol#L76-L91,79
validation-363,liquidationPenalty can incur bad debt from an undercollaterized position.,validation-363,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L529-L532,79
validation-39,`SwapAction::getSwapToken` will return wrong swap token for balancer EXACT_OUT swaps,validation-39,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/proxy/SwapAction.sol#L320-L330,79
validation-9,_modifyPosition is using block.number intead of block.timestamp when modifiying a position which will result in an incorrect lastDebtUpdate time.,validation-9,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L318,79
findings-116,`decreaseLever` uses incorrect position address when withdrawing,validation-75,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/PositionAction4626.sol#L61-L62,80
validation-357,SwapAction.transferAndSwap lacks payable function,validation-357,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/SwapAction.sol#L93-L103,53
validation-368,Underflow in PoolV3.updateQuoteRevenue,validation-368,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/PoolV3.sol#L700,52
validation-338,User's funds may be stolen via permitTransferFrom,validation-323,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/TransferAction.sol#L65-L77,80
validation-369,StakingLPEth::_checkMinShares() can cause user funds to be locked in the protocol.,validation-187,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/StakingLPEth.sol#L141-L144,97
validation-253,Insufficient Repay Amount Handling in Liquidation Process Can Lead to Bad Debt (`CDPVault::liquidatePosition`),validation-732,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L532,81
validation-372,"Incorrect assumption of loss in liquidatePositionBadDebt(), leads to undue burning of Treasury shares",findings-96, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L607-L624,84
validation-736,Unauthorized Token Transfer in transferAndJoin,validation-237,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/PoolAction.sol#L75-L111,82
validation-373,Pool is not updated in manualStopEmissionFor(),findings-121, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/reward/ChefIncentivesController.sol#L605-L608,86
findings-44,Bypass whenNotPaused modifier,validation-325,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L223-L249,83
validation-375,Unsafe/ wrong current prices could be ingested when a token gets deregistered from a pool,validation-375,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/oracle/BalancerOracle.sol#L67-L89,83
validation-376,Non-flexible update window forces an ingestion of de/in-flated prices across protocol,validation-772,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/oracle/BalancerOracle.sol#L114-L136,50
validation-303,Multi-Token Permit Vulnerability: Silent Failures and Signature Mismatches in TransferAction,validation-303,primary - i dont think that this is a vuln as the functions will revert anyway but validating for future references,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/TransferAction.sol#L53-L76,83
validation-377,Zero rates on new quoted tokens allow an attacker to take an interest free quota,validation-377,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/quotas/PoolQuotaKeeperV3.sol#L161-L177,108
validation-430,Wrong swap type being checked for in `PositionAction#decreaseLever()`,validation-430,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/PositionAction.sol#L355,83
validation-38,users still forced to follow previously set cooldownDuration even when cooldown is off (set to zero) before unstaking,validation-513, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/StakingLPEth.sol#L92,77
validation-490,Liquidations can revert due to liquidation penalty,validation-732,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L532,83
validation-528,Malicious borrower can evade full liquidation in `CDPVault::liquidatePosition` by repaying small amounts of debt ,validation-528,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L509,83
validation-382,"In the StakingLPEth contract, an attacker can obtain rewards by front-running.",validation-183, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/StakingLPEth.sol#L8,95
validation-391,The payback operation to the flashlender in PositionAction::onCreditFlashLoan() is missing the fee.,validation-396,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/PositionAction.sol#L364,165
findings-89,Permission roles of AuraVault.sol cannot be set,validation-448,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/vendor/AuraVault.sol#L120-L135,84
validation-395,Some functions will not work in PoolV3.sol as it uses the access control of GearBox,validation-395,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/PoolV3.sol#L797-L806,79
validation-400,"In CDPVault::liquidatePositionBadDebt(), the calculation of `loss` is incorrect.",validation-400,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L579,108
validation-535,Attacker can manipulate the AuraVault.sol's price per share so that early users get zero or lesser shares,validation-485,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/vendor/AuraVault.sol#L199,84
validation-750,"`lastRPS` can be set to 0, causing `rewardsPerSecond` to lose its original value",validation-594, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/reward/ChefIncentivesController.sol#L439-L447,84
validation-15,The last user to withdraw will be DOS and unexpectedly revert due to the _checkMinShares in the StakingLPEth contract.,validation-187,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/StakingLPEth.sol#L141-L144,85
validation-598,Unclaimed reward could become stuck in `MultiFeeDistribution` once the reward token is removed,validation-598,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/reward/MultiFeeDistribution.sol#L365-L398,85
validation-685,AuraVault is vulnerable to ERC4626 inflation attack,validation-485,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/vendor/AuraVault.sol#L199,85
validation-409,Not converting to shares when minting profit upon liquidations,validation-137,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/PoolV3.sol#L900,38
validation-544,"In `PositionActionPendle::_onDecreaseLever`, `tokenOut` is implemented incorrectly.",validation-544,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/PositionActionPendle.sol#L76-L91,86
validation-414,Debt is counted twice everytime modifyCollateralAndDebt is invoked,validation-414,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L383-L386,92
validation-417,Fees Paid During Flashloan Repayment Are Not Accounted In the `expectedLiquidity_` ,findings-55, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/Flashlender.sol#L106,207
validation-425,`CDPVault` has no method to retreive $PENDLE rewards generated by holding PendleLP tokens ,findings-43, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/CDPVault.sol#L1-L762,72
validation-427,Current AURA distribution calculation leads to loss of rewards at the end of cliffs,validation-427,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/vendor/AuraVault.sol#L340,49
findings-41,PositionAction4626._onDecreaseLever withdraws collateral from wrong position,validation-75,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/PositionAction4626.sol#L61-L62,89
findings-75,"ChefIncentivesController caches endRewardTime, which is not required, and may cause issues during reward update.",findings-75,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/reward/ChefIncentivesController.sol#L874,89
validation-429,"PendleLPOracle uses incorrect rate conversion method, potentially leading to inaccurate LP token pricing",validation-429,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/oracle/PendleLPOracle.sol#L103-L112,87
validation-432,Users are unfairly locked off from placing multiple cooldown attempts essentially DOSing from their assets potentially for as long as `cooldownDuration` for every attempted withdrawal,validation-432,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/StakingLPEth.sol#L104-L114,147
findings-71,`SwapAction.sol` does not check swapParams.deadline for `pendleJoin()` and `pendleExit()`.,findings-71,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/SwapAction.sol#L135-L137,90
findings-74,"In ChefIncentivesController, when availableRewards is not enough for distribution, the rewards are not distributed according to allocPoint.",findings-75,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/reward/ChefIncentivesController.sol#L874,90
validation-438,Positions liquidated with badDebt leading to loss of protocol shares should be excluded from reward,validation-438,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/reward/ChefIncentivesController.sol#L602-L607,84
findings-82,`PositionAction4626.sol#_onDecreaseLever` should withdraw from `leverParams.position` CDPVault position instead of `address(this)`.,validation-75,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/PositionAction4626.sol#L61-L62,90
validation-442,"Some liquidations will clear the user's collateral to 0 BUT WILL NOT clear the debt to 0, this state of 0 collateral and non zero debt is not desirable and has multiple critical impacts",validation-360,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L509-L526,116
validation-443,"The check for bad debt in liquidatePosition() does not account for the liquidationDiscount, this allows users to call liquidatePosition() when bad debt has accumulated, leading to huge losses for lenders",findings-60,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L509-L527,165
validation-445,The liquidatePosition() function can revert due to the debtFloor not being met,validation-445,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/CDPVault.sol#L321,95
validation-596,Portion of the `rdntToken` reward might be not accounted when `vestTokens()` is called,validation-765,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/reward/MultiFeeDistribution.sol#L500-L504,91
validation-446,If any bad debt accumulates in the protocol it becomes a race to withdraw funds resulting in a large loss of funds for the last users to withdraw,validation-418, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/PoolV3.sol#L429-L439,172
validation-447,"The liquidation penalty is wrongly minted as profit to the treasury, this causes a huge loss of funds for PoolV3 lenders",validation-447,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/PoolV3.sol#L899,134
validation-46,Malicious users can front-run to cause a denial of service (DoS) for StakingLPEth due to MinShares checks,validation-187,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/StakingLPEth.sol#L141-L144,61
validation-41,INFLATION_PROTECTION_TIME can not be up to a year as intended because it is hardcoded to `1749120350`,validation-41,"primary - it should be at the QA report but since reached the satisfactory bar, validating this",Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/vendor/AuraVault.sol#L301-L307,93
validation-468,Deprecated variable use in PendleLPOracle.sol::_fetchAndValidate() may lead to unexpected behavior,validation-121,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/oracle/PendleLPOracle.sol#L120,42
validation-91,Lack of safety buffer can lead to near instantaneous liquidations,validation-654,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L453,94
findings-69,`PoolAction.sol#_balancerJoin` does not support native ETH as input token.,findings-69,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/proxy/PoolAction.sol#L142-L152,95
validation-119,Missing profit when function liquidatePositionBadDebt invoking pool.repayCreditAccount will cause less profit minted to the treasury,findings-57, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/PoolV3.sol#L529-L576,95
validation-476,`CDPVault` did not handle external rewards from `PENDLE-LP`,findings-43, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/CDPVault.sol#L1-L762,54
validation-478,StakingLPEth will be DoSed using a small donation,validation-187,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/StakingLPEth.sol#L141-L144,110
validation-284,Outdated `rewardsPerSecond` will lead to incorrect reward distribution (`ChefIncentivesController::_handleActionAfterForToken` and `ChefIncentivesController::afterLockUpdate`),validation-284,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/reward/ChefIncentivesController.sol#L439-L447,96
validation-479,Granting approval to the wrong address,validation-479,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/PositionAction4626.sol#L47,70
validation-610,PositionAction4626 `_onIncreaseLever` doesn't work as intended ,validation-50,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/proxy/PositionAction4626.sol#L129,96
validation-482,Wrong approval amount in the onCreditFlashLoan function,validation-396,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/PositionAction.sol#L364,150
validation-493,"In ChefIncentivesController, if depositedRewards is insufficient, users will receive fewer rewards than they are entitled to.",validation-493,primary - very similar root cause to findings-108,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/reward/ChefIncentivesController.sol#L982,69
validation-509,An attacker could flashloan their way to high profits while frontrunning an oracle update,validation-509,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L448,97
validation-316,decreaseLever() does not work when flashlender's fee is not zero.,validation-396,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/PositionAction.sol#L364,98
findings-108,Discrepency b/w the `lastRewadTime` and the `lastAllPoolUpdate` can allow for incorrect reward distribution to pools if `registerRewardDeposit` deposits less assets,findings-108,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/reward/ChefIncentivesController.sol#L920-L922,99
validation-545,`CDPVault::modifyCollateralAndDebt()` can be triggered directly with `deltaCollateral==0` and `deltaDebt==0` to steal funds,validation-545,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L367,99
validation-613,The liquidatePositionBadDebt function should not be callable when there is no bad debt,findings-60,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L509-L527,99
validation-104,Chainlink oracle will return the wrong price for asset if the underlying aggregator hits minAnswer.,validation-727,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/oracle/ChainlinkOracle.sol#L96-L110,100
validation-510,Performing joins to `Balancer` might incorrectly revert when less than the slippage is needed since the slippage are instead enforced as `0` percent,validation-510,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/PoolAction.sol#L128-L153,87
validation-512,Having no minimum borrow would lead to liquidators having no incentive to liquidate small positions,validation-512,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L256,29
findings-79,"MultiFeeDistribution may overflow when calculating rewards, causing the rewards to be unclaimable.",findings-79,primary - extreme edge case,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/reward/MultiFeeDistribution.sol#L1187-L1215,101
validation-727,Chainlink Min-Max Circuit Breaker Limitations in Extreme Market Conditions Not Accounted For,validation-727,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/oracle/ChainlinkOracle.sol#L96-L110,101
findings-109,Cached `endRewardTime` can cause incorrect rewards distribution,findings-75,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/reward/ChefIncentivesController.sol#L874,102
validation-513,Users could sidestep waiting till the end of their cooldown durations,validation-513,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/StakingLPEth.sol#L92,90
validation-43,Unequal splitting of rewards in ChefIncentivescontroller,validation-43,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/4f508781a49ffa53511e7e5ed6cda0ff0eb5bdc5/src/reward/ChefIncentivesController.sol#L921-L922,102
validation-471,"In PoolV3, the ratio of assert to share is always 1:1. When the entire protocol incurs a loss, the users who withdraw their assets first are protected, while those who withdraw later bear all the losses.",validation-418, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/PoolV3.sol#L429-L439,102
validation-517,Malicious actor can use `StakingLPEth:::_checkMinShares` to DoS other users `StakingLPEth:::_withdraw`,validation-187,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/StakingLPEth.sol#L141-L144,120
validation-755,Lack of slippage control in withdraw and redeem Functions,validation-435,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/PoolV3.sol#L384,102
validation-187,Malicious actor can abuse the minimum shares check in `StakingLPEth` and cause DoS or locked funds for the last user that withdraws,validation-187,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/StakingLPEth.sol#L141-L144,103
validation-521,Inadequate update of repayment amount post-swap,findings-110, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/PositionAction.sol#L575-L589,203
validation-527,The addition of liquidation penalty could leave a debt position completely uncollaterized ,validation-363,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L529-L532,36
validation-444,"An attacker can frontrun a liquidation by liquidating just 1 wei to revert the whole liquidation, this increases the chance of bad debt occurring and discourages liquidators from liquidating in the future",validation-528, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L509,104
findings-54,"`PoolV3.sol` does not handle loss (bad debt) correctly, the loss is only paid by the last users who withdraw from `PoolV3.sol`.",validation-418, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/PoolV3.sol#L429-L439,105
validation-53,The liquidator's collateral reward amount will be smaller than expected because it is not properly scaled with tokenScale.,validation-229, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L509-L574,102
validation-531,Unutilized `upFrontAmount` in `PositionAction::increaseLever` swap potentially causes token locking,validation-531,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/PositionAction.sol#L319,127
validation-97,Missing Token Address sorting in `transferAndJoin` can cause Pool join Failure,validation-97,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/PoolAction.sol#L130,105
validation-259,Attacker can manipulate share-to-asset ratio to drain pool funds (`PoolV3::_convertToShares` and `PoolV3::_convertToAssets`),validation-605,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/PoolV3.sol#L549-L553,106
validation-536,Omission of ::msg.value Handling in internal Pool Functions,findings-70, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/proxy/SwapAction.sol#L263,81
findings-51,`PositionAction4626.sol#_onIncreaseLever()` should not deposit the collateral.,validation-50,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/proxy/PositionAction4626.sol#L129,108
validation-538,Incorrect function computation in `PoolV3::_amountWithWithdrawalFee`,validation-287,the submission doesnt refer to the full primary but points the increase in transferred asset,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/PoolV3.sol#L292-L309,43
validation-543,Changing CooldownDuration Period Won't Affect Existing Cooldowns.,validation-513, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/StakingLPEth.sol#L92,83
validation-546,Cooldown Period Extension on Subsequent Staking,validation-432, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/StakingLPEth.sol#L104-L114,100
validation-62,Liquidity pool is not adjusting the interest rate on healthy repayment profit,validation-441,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/PoolV3.sol#L567,108
validation-547,Unfair Loss Distribution and Withdrawal Blocking in Emergency Scenarios due to Minimum Shares Requirement,validation-187,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/StakingLPEth.sol#L141-L144,72
validation-550,"User able to unlock tokens 2 days earlier instead of the intended 1 day, due to the way the protocol rounds",validation-550,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/reward/MultiFeeDistribution.sol#L512-L517,61
validation-279,Lack of Slippage Control in `AuraVault::deposit` and `AuraVault::mint` Functions Can Lead to Unexpected Financial Losses for Users,validation-279,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/vendor/AuraVault.sol#L199-L225,109
validation-695,Attacker can DoS last withdrawer by depositing 1 wei and make their funds locked in the contract forever in `StakingLPEth`,validation-187,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/StakingLPEth.sol#L141-L144,109
validation-439,Permanent DOS of decreaseLever(),validation-396,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/PositionAction.sol#L364,110
validation-551,Incorrect Supply Rate Calculation in CDPVault,findings-95, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L478,69
validation-643,`VAULT_ADMIN_ROLE` and `VAULT_CONFIG_ROLE` not granted in AuraVault.sol ,validation-448,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/vendor/AuraVault.sol#L120-L135,111
validation-164,Lack of extra validations when using `Chainlink::latestRoundData` in `AuraVault::_chainlinkSpot` and `AuraVault::_getAuraSpot` will allow for stale or incorrect results to be used,validation-459,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/4f508781a49ffa53511e7e5ed6cda0ff0eb5bdc5/src/vendor/AuraVault.sol#L365-L379,112
validation-233,`transferAndSwap(...)` allows malicious user to steal all token approvals granted to the SwapAction.sol contract,validation-233,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/proxy/TransferAction.sol#L46-L81,112
validation-572,`PoolV3.sol::withdraw` function is vulnerable due to wrong `assetsSent` value calculation.,validation-287, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/PoolV3.sol#L292-L309,115
validation-397,Liquidators calling liquidatePositionBadDebt should not be earning any profit through liquidation discount at the costs of staker's profits,findings-7,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/4f508781a49ffa53511e7e5ed6cda0ff0eb5bdc5/src/CDPVault.sol#L606,114
validation-449,Lack of safety buffer in _isCollateralized could subject users who take out the max loan/max leverage position into an unfair liquidation,validation-654,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L453,114
validation-575,A donation attack in `StakingLPEth` causes the number of assets corresponding to `MIN_SHARES` to be magnified,validation-187,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/StakingLPEth.sol#L141-L144,56
validation-586,The donation attack on the StakingLPEth vault causes a Denial of Service (DoS).,validation-187,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/StakingLPEth.sol#L141-L144,93
validation-588,"The debt in EligibilityDataProvider::requiredUsdValue() needs to be converted into USD; otherwise, it is not a correct value comparison.",validation-588,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/reward/EligibilityDataProvider.sol#L187,100
validation-589, Exploitative Staking Strategy Leading to Vault Griefing in Staking ,validation-593,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/StakingLPEth.sol#L141,147
findings-52,"`PositionAction.sol#onCreditFlashLoan()` does not repay flashloan fees, causing all `decreaseLever()` functions to be unusable.",validation-396,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/PositionAction.sol#L364,118
validation-25,`whenNotPaused` can be bypassed in CDPVault using `modifyCollateralAndDebt`,validation-325,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L223-L249,118
validation-595,Improper Handling of msg.value in ETH Pool Join Operations,findings-69, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/proxy/PoolAction.sol#L142-L152,83
findings-114,`increaseLever` incorrectly attempts to deposit multiple times in PositionAction4626 and to incorrect address,validation-50,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/proxy/PositionAction4626.sol#L129,119
findings-99,Flash lending fee is not added to expectedAmount effectively making it non-withdrawable,validation-441,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/PoolV3.sol#L567,119
validation-600,Partial repayments of accrued interest are inflated,validation-347,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L707,97
findings-37,"Due to missing whenNotPaused modifiers on ""borrow"" and ""repay"" CDPVault's functions, users can borrow and repay despite of emergency conditions being set-up by the PAUSER role",validation-325,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L223-L249,121
validation-61,Wrong conversion of shares in PoolV3 so lenders dont earn yield,validation-61,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/1b32965bc1ce36b885df687069880140073c6285/src/PoolV3.sol#L427-L439,307
validation-467,"An attacker can frontrun calls to all functions that call `_transferFrom()` with a permit, by directly calling the permit function on the token contract to ensure Tx always reverts",validation-323,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/TransferAction.sol#L65-L77,121
validation-523,Abuse of permit functionality to block legitimate transactions,validation-323,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/TransferAction.sol#L65-L77,122
validation-603,Incorrect address is used as `spender` for ERC20 permit signature verification,validation-603,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/TransferAction.sol#L69,122
validation-618,The `loss` calculation in `CDPVault#liquidatePositionBadDebt‎()` is incorrect,findings-96, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L607-L624,96
validation-524,Double deposit issue in `PositionAction::increaseLever` function for ERC4626 collateral,validation-50,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/proxy/PositionAction4626.sol#L129,123
validation-619,Unused asset is transferred to the wrong recipient,validation-624,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/proxy/SwapAction.sol#L141,205
findings-87,`PositionAction.sol#onCreditFlashLoan` may have leftover tokens after conducting `leverParams.auxSwap`.,findings-87,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/PositionAction.sol#L475-L482,125
validation-148,Lack of price oracle fallback design can block liquidations then lead to protocol insolvency,validation-148,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L590,125
validation-620,Unspent assets are not returned to the sender when performing a Balancer join,validation-604,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/PoolAction.sol#L128,165
validation-65,Anyone can stop reward emissions in ChefIncentivesController,validation-65,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/reward/ChefIncentivesController.sol#L813-L842,125
findings-122,PositionAction@decreaseLever will always revert due to insufficient allowance if the Flashlender charges fees,validation-396,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/PositionAction.sol#L364,126
validation-500,Users are able to deposit and withdraw even when the CDPVault is paused,validation-325,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L223-L249,126
validation-624,Providing only one liquidation ratio puts the borrower at high risk of liquidation,validation-654,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L453,38
validation-626,"Withdrawals are meant to be pausable, but it is not possible in practice",validation-626,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/reward/MultiFeeDistribution.sol#L537,76
validation-627,Miscalculation of the interest rate and a mismatch with the documentation,validation-627,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/PoolV3.sol#L662-L667,78
validation-739,Index Misalignment in updateLeverJoin Function,validation-71,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/proxy/PoolAction.sol#L181-L223,128
findings-72,TransferAction.sol passes incorrect spender for ERC2612 PERMIT,validation-603, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/TransferAction.sol#L69,129
validation-537,No Accesscontrol role is granted on AuraVault.sol thereby cause loss of asset and prevent calling `setVaultConfig` and `setParameter` functions.  ,validation-448,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/vendor/AuraVault.sol#L120-L135,130
validation-631,Eligibility Check Fails for Users with Zero Debt,validation-631,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/reward/EligibilityDataProvider.sol#L177-L202,144
validation-638,`PoolV3.sol::redeem` & `PoolV3.sol::withdraw` function are prone to make underlying token depositor in overall loss while redeeming/withdrawing their underlying token which they deposited in the beginning.,validation-638,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/PoolV3.sol#L330,118
validation-64,Wrong calculation of quota revenue results in wrong pool state,validation-64,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/quotas/PoolQuotaKeeperV3.sol#L147,189
validation-98,Misssing QueryJoin Pre-Check for maxAmountIn In `transferAndJoin` funtion leads to potential slippage,validation-98,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/PoolAction.sol#L134,133
findings-56,"The formula to calculate `newCumulativeIndex` in `CDPVault.sol#calcDecrease()` is incorrect, leading to user paying less debt interest.",validation-347,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L707,134
validation-647,Reward is not updated in multiple actions,validation-284,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/reward/ChefIncentivesController.sol#L439-L447,35
validation-403,Discrepancy between `ChefIncentivesController::depositedRewards` and contract balance can lead to inflated rewards,findings-108, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/reward/ChefIncentivesController.sol#L920-L922,135
findings-40,PositionAction4626.increaseLever will revert due to double execution of CDPVault.modifyCollateralAndDebt,validation-50,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/proxy/PositionAction4626.sol#L129,136
validation-710,Wrong convertToShares() function leads to burn of profits,validation-605,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/PoolV3.sol#L549-L553,136
validation-388,There is an error in the auxSwap operation within the PositionAction::onCreditFlashLoan() function.,findings-87, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/PositionAction.sol#L475-L482,137
findings-36,`CDPVault.modifyCollateralAndDebt()` is available on pause (no `whenNotPaused` modifier),validation-325,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L223-L249,138
validation-653,Decrease leverage fails when there is no auxiliary action data,validation-544,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/PositionActionPendle.sol#L76-L91,92
validation-434,Interest rate is being incorrectly updated when there is a profit,validation-441,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/PoolV3.sol#L567,139
validation-483,Incorrect debt calculation in `calcDecrease` leading to improper liquidations and asset loss,validation-347,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L707,139
validation-656,No incentive to liquidate small position,validation-512, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L256,35
validation-765,`vestTokens` bug in MultiFeeDistribution.sol causes new incentives to erase previous incentives,validation-765,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/reward/MultiFeeDistribution.sol#L500-L504,140
validation-661,PoolAction.sol#exit(...) can be used by an attacker to exit other users because the exit(...) function accepts  `from` parameter as input from users to use in the ERC20.transferFrom,validation-661,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/PoolAction.sol#L286,108
validation-722,BalancerOracle Susceptible to Flash Loan Price Manipulation,validation-648, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/oracle/BalancerOracle.sol#L135,144
validation-347,Incorrect calculation of `newCumulativeIndex` in function `calcDecrease`,validation-347,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L707,146
validation-687,`VaultRegistry::getUserTotalDebt()` does not normalize debt amount to 18 decimals.,validation-687,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/VaultRegistry.sol#L65,70
validation-689,`PositionAction::onFlashLoan()` is missing initiator check when trigger flashloan.,validation-689,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/Flashlender.sol#L87,103
validation-69,persisting RewardPerSecond can DOS reward claims,validation-594, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/reward/ChefIncentivesController.sol#L439-L447,293
validation-690,Functionalities of  `StakingLPEth` can be permanently DoSed through Donation attack,validation-187,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/StakingLPEth.sol#L141-L144,85
validation-237,`transferAndJoin(...)` function of PoolAction.sol can be used to steal tokens from users,validation-237,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/PoolAction.sol#L75-L111,149
validation-691,`VaultRegistry::getUserTotalDebt()`  is computed incorrectly because the pending interest is not added.,validation-697,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/reward/EligibilityDataProvider.sol#L187,90
validation-693,Reward and incentive computation missing interest calculation when computing debt/user balance.,validation-693,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/reward/ChefIncentivesController.sol#L693,113
validation-698,expectedLiquidity does not compound which leads to stuck funds.,findings-95, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L478,174
validation-703,Incorrect Debt Repayment Calculation in `CDPVault::liquidatePosition` due to which updateQuotaRevenue keeps the bad debt value updating.,validation-360,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L509-L526,105
validation-50,`PositionAction4626::increaseLever` will always revert,validation-50,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/proxy/PositionAction4626.sol#L129,156
validation-704,`PendleLPOracle::spot` Can potentially return incorrect price for the asset,validation-429,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/oracle/PendleLPOracle.sol#L103-L112,46
validation-707,Suboptimal Borrowing Conditions not checked in `setInterestRateModel` Function. ,validation-707,primary - managers should be trusted anyway - QA at most,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/PoolV3.sol#L755,77
validation-708,Rewards may be spread out among the **wrong time period** due to the way the protocol calculates it,validation-708,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/reward/MultiFeeDistribution.sol#L1202-L1204,162
validation-594,`lastRPS` could be set to `0` accidentally,validation-594,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/reward/ChefIncentivesController.sol#L439-L447,163
validation-718,Liquidation penalty does not work correctly,findings-58,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/CDPVault.sol#L529-L531,39
validation-441,when repaying debt _updateBaseInterest doesnt adds profit  which results in incorrect  rates,validation-441,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/PoolV3.sol#L567,165
findings-57,`CDPVault.sol#liquidatePositionBadDebt()` should not set profit = 0 when calling `pool.repayCreditAccount()`.,findings-57,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/PoolV3.sol#L529-L576,167
validation-29,Invalid handling of flash loan fees in `PositionAction::onCreditFlashLoan` forcing it to always revert,validation-396,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/PositionAction.sol#L364,172
validation-741,Insufficient Handling of Pool Token BPT in maxAmountsIn Array,validation-741,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/PoolAction.sol#L181,68
validation-525,Improper handling of `fee` parameter in `PositionAction::onCreditFlashLoan`,validation-396,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/PositionAction.sol#L364,173
validation-743,Inconsistent Bad Debt Checks Allow Overlap in Liquidation Function Usage,findings-60,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L509-L527,144
validation-518,"Remove a vault without checking underlying debt, can DoS users who claim rewards via ```ChefIncentivesController:::claim```",validation-518,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/VaultRegistry.sol#L49-L55,178
validation-622,The approved allowance didn't account flashLoan fee,validation-396,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/PositionAction.sol#L364,178
findings-100,Incorrect formula is used for `calcDecrease`,validation-347,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L707,184
validation-744,Incorrect Updating of `maxAmountsIn` for Tokens After Pool Token,validation-741, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/PoolAction.sol#L181,69
validation-747,Total debt could exceed the debt ceiling due to interest accrual,validation-747,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/PoolV3.sol#L484,86
validation-748,Potential Sandwich Attack Vulnerability in Oracle Updates,validation-772,duping under 772 as it´s the same root cause of price being stale,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/oracle/BalancerOracle.sol#L114-L136,69
validation-592,The new reward calculation in `ChefIncentivesController.sol` is incorrect,validation-549,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/reward/ChefIncentivesController.sol#L988-L994,192
validation-380,the  calculation for PoolV3:repayCreditAccount is not correct which can lead to incorrect  rates.,validation-380,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/CDPVault.sol#L652-L715,193
validation-170,"When protocolFee is present in the flashLender contract, the 'decreaseLever' function always reverts to 'insufficient allowance'",validation-396,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/PositionAction.sol#L364,196
validation-758,Mismanagement of ETH in the join() Function Poses Significant Risk of Funds Loss,findings-69, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/proxy/PoolAction.sol#L142-L152,54
validation-76,`PoolAction::_balancerExit` returns wrong token out amount,validation-76,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/proxy/PoolAction.sol#L275,147
validation-767,"`CDPVault::liquidatePosition` may revert even when paying full repayAmount, if the newDebt amount calculated is less than `vaultConfig.debtFloor` amount",validation-445, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/CDPVault.sol#L321,130
validation-769,Incorrect Access Control in updateQuotaRevenue,validation-769,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/PoolV3.sol#L691,39
validation-737,Front-running attack could possibly block legitimate full liquidations,validation-528, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L509,208
validation-398,The for-loop in the `withdraw` function in `MultiFeeDistribution.sol` could get into an infinite loop leading to gas exhaustion and DoS,findings-20,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/reward/MultiFeeDistribution.sol#L555,212
validation-418,"Because of the Asset:Share 1:1 Conversion, if Vault Incur a Loss, the Last User to Withdraw Will Take The Entire Loss",validation-418,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/PoolV3.sol#L429-L439,212
validation-77,Incorrect Collateral Transfer Calculation in Liquidation Function Allows Liquidators to Avoid Penalty and Accumulate bad debts in the protocol,validation-223,the mitigation is wrong tho,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L530-L531,140
validation-780,bug in `claim` allows users who are disqualified to claim their previously earned emissions,validation-780,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/reward/ChefIncentivesController.sol#L520-L521,76
validation-549,Users of a vault can steal other user's rewards when one vault's `lastRewardTime` differs from another vault's `lastRewardTime`,validation-549,primary - was about to dup under findings-75 but this and the dups have more context,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/reward/ChefIncentivesController.sol#L988-L994,222
validation-213,"DoS when calling `PositionAction4626::increaseLever`, due to double spending on the flash loan receiver",validation-50,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/proxy/PositionAction4626.sol#L129,227
validation-581,Invalid token transfer via _transferFrom in transferAndSwap function,validation-233, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/proxy/TransferAction.sol#L46-L81,227
validation-72,Incorrect position passed in `PositionAction4626::_onDecreaseLever` forcing it to always revert,validation-75,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/PositionAction4626.sol#L61-L62,256
validation-189,Bad upgradeability initialization practice in `BalancerOracle` and `PendleLPOracle`,validation-189,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/oracle/PendleLPOracle.sol#L56,258
validation-615,`newCumulativeIndex` is calculated incorrectly when portion of interest is repaid,validation-347,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L707,266
validation-135,Incorrect calculation of `expectedLiquidityDelta` in function `repayCreditAccount`,validation-441,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/PoolV3.sol#L567,281
validation-204,"CDPVault.calDecrease() calculates ```newCumulativeIndex``` wrongly, as a result, either the borrower/the protocol will lose funds. ",validation-347,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L707,296
validation-735,Malicious Borrower Cycle Exploits to Inflate Interest Rates,validation-735,primary - this can happen organically tho,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L256,296
validation-94,`PositionAction` allows leveraging positions on unregistered vaults,validation-520,"since the onFlashloan finally calls CDPV, root cause is the same",Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L223,106
validation-323,DOS attack to SwapAction.transferAndSwap() when using  an ERC20 permit transferFrom.,validation-323,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/TransferAction.sol#L65-L77,309
validation-71,"`PoolAction::updateLeverJoin` wrongly updates `assetsIn` array, leading to `PositionAction4626::_onIncreaseLever` to always revert",validation-71,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/proxy/PoolAction.sol#L181-L223,325
findings-46,Insufficient approval in `onCreditFlashLoan` during `PositionAction.decreaseLever` operation,validation-396,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/PositionAction.sol#L364,333
validation-75,`PositionAction4626::_onDecreaseLever` wrongly updates `tokenOut` forcing user's funds to be stuck in the position action contract,validation-75,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/PositionAction4626.sol#L152,380
validation-396,"PositionAction.decreaseLever() fails to consider the loan fee in Flashlender when calculating loanAmount, as a result, the functionanlity will not work when protocolFee != 0. ",validation-396,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/PositionAction.sol#L364,398
validation-448,"AuraVault inherits AccessControl BUT does not call the _setupRole() function in it's constructor to set the initial roles, this leads to a complete DOS of the important claim function rendering the contract unable to claim rewards",validation-448,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/vendor/AuraVault.sol#L120-L135,406
validation-103,Users will not be able to withdraw assets from the Silo upon cooldown rescission,validation-513, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/StakingLPEth.sol#L92,97
validation-122,Unfair cooldown duration due to time-setting of global `cooldown` period,validation-432, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/StakingLPEth.sol#L104-L114,111
validation-134,Incorrect spender in ERC20 permit approval prevents token transfers,validation-603, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/TransferAction.sol#L69,61
validation-141,Incorrect Repayment Priority in `calcDecrease()` Function.,validation-347,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L707,75
validation-207,Liquidation Allowed with Insufficient Collateral,validation-360,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L509-L526,54
validation-295,Improper Vote Validation in the GaugeV3 contract,validation-295,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/quotas/GaugeV3.sol#L126-L137,138
validation-300,Absence of Slippage Controls in Deposit and Mint Functions,validation-435,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/PoolV3.sol#L384,53
validation-313,Inconsistent Cooldown Period Allows Premature Unstaking,validation-513, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/StakingLPEth.sol#L92,128
validation-317,BalancerOracle.update() wrongly assumes that all of the weighted pools uses totalSupply,validation-648,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/oracle/BalancerOracle.sol#L135,127
validation-334,Users can still deposit and withdraw in the CDPVAULT even when the contract is paused.,validation-325,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L223-L249,135
validation-337,A user can Borrow and Repay when the contract is paused but the liquidation function cannot be used putting the contract at risk of accumulating bad debt.,validation-421,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/CDPVault.sol#L256-L264,95
validation-339,Based on implementation Repay should never revert but this function and liquidate functions makes externals call and can revert.,validation-231,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/PoolV3.sol#L537,91
validation-343,ExpectedLiquidity is not increasement in the V3pool when a user repays is debt eventhough treasury is minted shares thereby affecting the _baseInterestRate and total asset,validation-441,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/PoolV3.sol#L567,165
validation-353,Liquidator can partial Liquidate a position consider to be Ok and leave protocol with a huge bad debt.,validation-360,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L509-L526,142
validation-367,The implementation of the LiquidatePosition function is not efficient and liquidators will earn above the slated 3-4% by the Docs.,findings-60,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L509-L527,122
validation-386, function _chainlinkSpot() in the Auravault uses  latestRoundData which might return stale or incorrect result,validation-459,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/4f508781a49ffa53511e7e5ed6cda0ff0eb5bdc5/src/vendor/AuraVault.sol#L365-L379,98
validation-452,"`AuraVault::claim` reward calculation does not deduct fees from reward amount, causing DoS or extra rewards lost",validation-321, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/4f508781a49ffa53511e7e5ed6cda0ff0eb5bdc5/src/vendor/AuraVault.sol#L301-L303,147
validation-453,"Liquidation discount incentivizes self-liquidations to avoid paying full debt, causing a loss for the protocol and lenders",findings-60,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L509-L527,93
validation-456,"Liquidation doesn't account for penalty when calculating collateral to give, allowing users to profit by borrowing and self-liquidating",findings-58, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/CDPVault.sol#L529-L531,289
validation-457,"`PoolV3::repayCreditAccount` doesn't take into account the `profit` when updating the `expected liquidity`, causing incorrect accounting",validation-441,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/PoolV3.sol#L567,262
validation-459,`AuraVault` reward calculation can be incorrect due to insufficient Chainlink `latestRoundData()` check,validation-459,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/4f508781a49ffa53511e7e5ed6cda0ff0eb5bdc5/src/vendor/AuraVault.sol#L365-L379,167
validation-460,"`AuraVault` lacks slippage protection for deposit, mint, withdraw, redeem",validation-279,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/vendor/AuraVault.sol#L199-L225,130
validation-463,User debt for unsafe positions can never be cleared due to incorrect `deltaDebt` calculation in `CDPVault::liquidatePosition`,validation-223,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L530-L531,287
validation-464,"Inconsistent invariant check for `bad debt` allows users to call `CDPVault::liquidatePositionBadDebt` on positions that do not have bad debt, breaking protocol invariant",findings-60,https://notes.watchpug.com/p/1909aa8a565HVvGe#n_12 - wp-h4,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L509-L527,192
validation-465,"`CDPVault::liquidatePositionBadDebt` incorrectly calculates the `debt loss`, causing incorrect accounting within `PoolV3` and more treasury shares to burn",findings-96, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L607-L624,150
validation-466,"`CDPVault:_modifyPosition` will revert if `address(rewardController) != address(0)`, causing DoS of core functionalities",findings-17, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/main/src/CDPVault.sol#L335-L337,69
validation-505,The absence of the whenNotPaused modifier in some functions may lead to a deterioration in contract security,validation-325,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L223-L249,37
validation-526,Cooldown Reset Issue in `cooldownAssets` and `cooldownShares` Functions of `StakingLPEth` Contract,validation-432, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/StakingLPEth.sol#L104-L114,35
validation-532,attacker can lock foverer part of initial user funds by depositing 1 wei of LP token ,validation-187,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/StakingLPEth.sol#L141-L144,53
validation-534,Unauthorized token relocking in `_withdrawExpiredLocksFor` allows fund locking without user consent,validation-236, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/reward/MultiFeeDistribution.sol#L1351-L1381,90
validation-553,"Malicious users can open many small positions and borrow debt, liquidators has no profit to liquidate such positions",validation-512, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L256,32
validation-555,Malicious users can withdraw more the assets than he should to drain the poolv3 assets,validation-287, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/PoolV3.sol#L292-L309,46
validation-557,The registered vaults still can be removed even the vaults have assets and debt,validation-518,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/VaultRegistry.sol#L49-L55,41
validation-558,The balancer oracle is vulnerable to read-only reentrancy attack,validation-192, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/oracle/BalancerOracle.sol#L120-L121,29
validation-559,Wrong balancer bpt totalSupply usage can cause protocol account error,validation-648,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/oracle/BalancerOracle.sol#L135,43
validation-562,Users `TransferAction#_transferFrom` related txs can be reverted,validation-323,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/proxy/TransferAction.sol#L65-L77,78
validation-563,Don't check chainlink's latestRoundData return price is stale or not,validation-459,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/4f508781a49ffa53511e7e5ed6cda0ff0eb5bdc5/src/vendor/AuraVault.sol#L365-L379,46
validation-570,"Lack of validation to check the minimum borrowing amount, which allow a malicious actor to create a lot of `too small` debt positions, which is difficult to be liquidated - due to less incentive for liquidators to liquidate these `too small` debt positions",validation-512, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L256,134
validation-644,Inaccurate pool quota revenue calculation causes underreported earnings in `PoolQuotaKeeperV3`,validation-644,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/quotas/PoolQuotaKeeperV3.sol#L135-L153,85
validation-657,Many function work without when whenNotPaused,validation-626, ,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/reward/MultiFeeDistribution.sol#L537,45
validation-680,Incorrect quota revenue update in `liquidatePositionBadDebt` function,validation-680,primary - similar to validation-441,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L579-L632,63
validation-96,Inability to perform partial liquidations in `liquidatePositionBadDebt` leads to inefficient handling of bad debt,validation-360,,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/CDPVault.sol#L509-L526,47
validation-99,"`maxFlashLoan` calculation ignores protocol fee, risking pool insolvency and flash loan failures",validation-99,primary,Satisfactory,https://github.com/code-423n4/2024-07-loopfi/blob/57871f64bdea450c1f04c9a53dc1a78223719164/src/Flashlender.sol#L64-L68,61
validation-276,PositionActions.sol: Fix CreditFlashloan and onFlashloan Functions According to WatchPug Report,,no content,Unsatisfactory,,20
validation-6,Chainlink’s latestRoundData might return stale or incorrect results,,OOS --> [[M-4] Chainlink's latestRoundData might return stale or incorrect results](https://github.com/code-423n4/2024-07-loopfi/blob/main/4naly3er-report.md#m-4-chainlinks-latestrounddata-might-return-stale-or-incorrect-results),Unsatisfactory,,20
validation-11,contract are vulnerable to feeontransfer accounting related issue,,OOS --> [[M-1] Contracts are vulnerable to fee-on-transfer accounting-related issues](https://github.com/code-423n4/2024-07-loopfi/blob/main/4naly3er-report.md#m-1-contracts-are-vulnerable-to-fee-on-transfer-accounting-related-issues),Unsatisfactory,,21
validation-451,Users and credit managers can be unfairly liquidated if the base interest rate is suddenly changed ,,no content,Unsatisfactory,,21
validation-701,Chainlink’s latestRoundData may return stale or wrong value,,no content,Unsatisfactory,,21
validation-23,Reentrancy Attack,,the submission does not properly provide a demonstration of the issue with code snippets and reasoning,Unsatisfactory,,22
validation-640,`_massUpdatePools()` is susceptible to DoS with block gas limit,,the submission does not properly provide a demonstration of the issue with code snippets and reasoning,Unsatisfactory,,22
validation-766,Liquidations will not be possible once oracle price is 0,,the submission does not properly provide the demonstration of the issue with code snippets and reasoning,Unsatisfactory,,22
validation-393,Lenders are unable to stake lpETH.,,the submission does not properly provide a demonstration of the issue with code snippets and reasoning,Unsatisfactory,,23
findings-30,`poolQuotaRevenue` may return outdated index,,the rates are updated within the _vote function,Unsatisfactory,,24
validation-674,Balancer oracle,,the submission does not properly provide the demonstration of the issue with code snippets and reasoning,Unsatisfactory,,25
validation-20,contracts are vulnerable to feeontransfer accounting related issue,,OOS --> [[M-1] Contracts are vulnerable to fee-on-transfer accounting-related issues](https://github.com/code-423n4/2024-07-loopfi/blob/main/4naly3er-report.md#m-1-contracts-are-vulnerable-to-fee-on-transfer-accounting-related-issues),Unsatisfactory,,26
validation-383,ERC20 transferFrom return values not checked in FlashLender contract,,OOS --> [[M-6] Return values of transfer()/transferFrom() not checked](https://github.com/code-423n4/2024-07-loopfi/blob/main/4naly3er-report.md#m-6-return-values-of-transfertransferfrom-not-checked),Unsatisfactory,,26
findings-11,Precision loss in endRewardTime causing less rewards,,the submission does not properly provide a demonstration of the issue with code snippets and a simple POC,Unsatisfactory,,27
validation-17,unused return,,the submission does not properly provide a demonstration of the issue with code snippets and reasoning,Unsatisfactory,,27
validation-21,unsafe casting,,the submission does not properly provide a demonstration of the issue with code snippets and reasoning,Unsatisfactory,,27
validation-529,base interest rate could be calculated incorrectly if a user withdraws more than available ,,the submission does not properly provide a demonstration of the issue with code snippets and reasoning,Unsatisfactory,,28
validation-669,Problem with external call,,couldn´t verify the validity of this. insufficient proof,Unsatisfactory,,28
validation-131,Input Validation for array length in setOracles Function,,this should be sent in QA and the submission does not hold the bar as a qualified report,Unsatisfactory,,29
validation-56,Inadequate checks to confirm the correct status of the sequecncerUptimeFeed in ChainlinkOracle,,The contracts will be deployed on Eth Mainnet,Unsatisfactory,,29
validation-19,loss of precision,,the submission does not properly provide a demonstration of the issue with code snippets and reasoning,Unsatisfactory,,30
validation-32,there is no access control,,OOS - test contract,Unsatisfactory,,30
validation-673,Block gas limit,,the submission does not properly provide a demonstration of the issue with code snippets and reasoning with gas cost,Unsatisfactory,,30
findings-9,Liquidations create frontrunning incentives,,liquidations are subject to MEV so even the self liquidation is not guaranteed,Unsatisfactory,,32
validation-22,centralized risk for trusted owner,,Admin roles are trusted,Unsatisfactory,,32
validation-33,dubious typecast,,the submission does not properly provide a demonstration of the issue with code snippets and reasoning,Unsatisfactory,,33
validation-664,"To claim rewards, user needs to spend assets instead of staking assets",,the implementation is correct as per the intended design - works like a swap action untill a deadline - no vulnerability here,Unsatisfactory,,33
validation-232,"The AuraVault has multiple functions that use safeApprove() to approve assets to the rewards pool before calling rewardPool.deposit(), depending on the rewardPool this can cause a permanent DOS",,OOS --> [[L-7] safeApprove() is deprecated](https://github.com/code-423n4/2024-07-loopfi/blob/main/4naly3er-report.md#l-7-safeapprove-is-deprecated),Unsatisfactory,,34
validation-494,Liquidators can prevent users from making their positions healthy during an unpause,,the implmenetation is correct as users can repay their debts during paused state as the submission declares itself - not a vulnerability,Unsatisfactory,,34
validation-235,Approval Race Conditions,,the submission does not properly provide a demonstration of the issue with code snippets and reasoning,Unsatisfactory,,37
validation-24,Callback Function Checks,,no proper content - spammish,Unsatisfactory,,37
validation-336,Pause/unpause functionalities not implemented in many pausable contracts,,commented: https://github.com/code-423n4/2024-07-loopfi-validation/issues/336#issuecomment-2294922629,Unsatisfactory,,38
validation-328,Liquidation would not be possible for certain amounts and possibly make position go in bad debt,,the proof is not provided for why the first liquidatiopn attempt is not succeeded. ,Unsatisfactory,,40
validation-683,whenNotPaused modifier can be bypassed.,,the submission does not properly provide a demonstration of the issue with code snippets and reasoning,Unsatisfactory,,40
validation-12,Usage of Solidity Version with Known Severe Issues,,the submission does not properly provide a demonstration of the issue with code snippets and reasoning,Unsatisfactory,,41
validation-419,`CDPVault::withdraw` Should Not Have the `whenNotPaused` Modifier as it Prevent Users From Accessing Their Funds,,the modifier is for emergency pause mechanism compliance,Unsatisfactory,,41
validation-751,Lack of Grace Period After Oracle Recovery in Liquidation Functions,,repay() or deposit() will succeed in this period hence giving sufficient time for users since  collateralValue (need to call the oracle to obtain collateralValue)  in modifyCollateralAndDebt() is only used for borrow() and withdraw() operations. hence there is no restrictions to the debt holder,Unsatisfactory,,41
validation-263,CDPVault.sol can accumulate bad debt when paused because liquidation functions are pausable,,the pausing system is to protect everyone even for the ones underwater as they might be there due to a failure/exploit in  pricing so the implementation should be accounted as valid,Unsatisfactory,,42
validation-514,Potential for Optimization in Supply Rate Calculation to Ensure Precise Interest Payments,,the submission does not properly provide a demonstration of the issue with code snippets and reasoning,Unsatisfactory,,42
validation-734,Incorrect Implementation of ERC-3156 maxFlashLoan Function,,"as per the contest readme, there is no EIP compliance enforced: https://github.com/code-423n4/2024-07-loopfi#eip-compliance-checklist",Unsatisfactory,,42
validation-480,Incorrect debt data calculation due to Invalid Validation of the address parameter of liquidatePosition() and liquidatePositionBadDebt().,,comment: https://github.com/code-423n4/2024-07-loopfi-validation/issues/480#issuecomment-2294933648,Unsatisfactory,,43
validation-508,Division before multiplication will lead to incorrect calculation of cumulativeIndexLU,,there is no logic why the math function truncates to zero,Unsatisfactory,,43
validation-678,"Anyone can DOS the deposit, mint and claim functions.",,OOS --> [[L-7] safeApprove() is deprecated](https://github.com/code-423n4/2024-07-loopfi/blob/main/4naly3er-report.md#l-7-safeapprove-is-deprecated),Unsatisfactory,,43
validation-496, Redundant Function Logic in `_convertToAssets`,,invalid as the lpeth - eth is assumed as 1:1,Unsatisfactory,,44
validation-714,PoolV3 mints shares 1:1 for a given amount of assets,,the shares are 1:1 pegged. the implementation is correct,Unsatisfactory,,44
validation-302,Lack of Length validation in `setOracles` function,,admin/manager interactions are assumed as trusted at readme,Unsatisfactory,,45
validation-60,`AuraVault::_getAuraSpot` can result in stale prices,,OOS --> [[M-4] Chainlink's latestRoundData might return stale or incorrect results](https://github.com/code-423n4/2024-07-loopfi/blob/main/4naly3er-report.md#m-4-chainlinks-latestrounddata-might-return-stale-or-incorrect-results),Unsatisfactory,,45
validation-731,Non compliance with ERC-4626 Standard for totalAssets,,there is no compliance referred as per the contest repo: https://github.com/code-423n4/2024-07-loopfi#eip-compliance-checklist,Unsatisfactory,,46
validation-171,Users can't stake `lpETH` because there is no `stake` method in `StakingLPEth`,,the implementation is correct,Unsatisfactory,,47
validation-616,The AuraVault's claim function will charge for Aura tokens even when it sends none to the caller,,this is the intended mechanism,Unsatisfactory,,47
validation-55,Unspecified permission type could allow permitted address for ,,"this is the general ambiguity of approvals - hence it provides speculative scenarios where indeed the users are given approvals for being trusted ones. As such, if there is no restriction to the approved ones, it should be good to go. in other words, the code should not break the allowance mechanism and it´s not the case for the referred part in the codebase",Unsatisfactory,,48
validation-484,UUPSUpgradeable vulnerability in OpenZeppelin Contracts,,"the package.json has ""@openzeppelin/hardhat-upgrades"": ""^1.22.1"", while the submission refers to  @openzeppelin/contracts-upgradeable : >= 4.1.0 < 4.3.2",Unsatisfactory,,49
validation-495,Lack of Fee Calculation in `_amountWithFee` Function,,the submission does not properly provide a demonstration of the issue with code snippets and reasoning,Unsatisfactory,,49
validation-138,[M-01] Malicious consumption of fee,,invalid,Unsatisfactory,,51
validation-709,Lack of Fee Validation in flashLoan and creditFlashLoan Functions Could Result in Inaccurate Fees and Potential Losses,,it is possible. the implementation is correct,Unsatisfactory,,51
validation-146,Potential Data Truncation in `setParameter` Function,,the submission does not properly provide a demonstration of the issue with code snippets and reasoning,Unsatisfactory,,52
validation-634,Unsafe External Call to pool.repayCreditAccount Without Handling Failures,,the submission does not properly provide a demonstration of the issue with code snippets and reasoning,Unsatisfactory,,54
validation-745,Bringing a position from unsafe to safe by liquidation paritally,,it´s the intended mechanism - if it continues to degrade there is no proof why the liquidation cant be succeeded.,Unsatisfactory,,54
validation-401,"Users can compute Permit2 signature for any ERC20 token, ultimately stealing from `PositionAction`'s Ether",,the submission does not properly provide a demonstration of the issue with code snippets and reasoning,Unsatisfactory,,55
validation-10,Unchecked Return Values in CDPVault Contract,,OOS --> [[M-6] Return values of transfer()/transferFrom() not checked](https://github.com/code-423n4/2024-07-loopfi/blob/main/4naly3er-report.md#m-6-return-values-of-transfertransferfrom-not-checked),Unsatisfactory,,131
validation-36,Delegatecall Vulnerability Leading to Reentrancy and Unauthorized Access Risks,,the submission does not properly provide the demonstration of the issue with code snippets and reasoning,Unsatisfactory,,57
validation-127,Potential Underflow in Total Debt Calculation,,it´s unlikely since vaults total debt cant be less than positions debt as the position borrows from the vault,Unsatisfactory,,84
validation-522,Unchecked Arithmetic in calcDecrease Function Can Lead to Integer Overflow/Underflow,,no proper reasoning why it can overflow/underflow even in v0.8.0^,Unsatisfactory,,58
validation-145,Attacker can potentially manipulate FlashLender into a profitable attack,,the submission does not properly provide a demonstration of the issue with code snippets and especially the reasoning,Unsatisfactory,,155
validation-477,Lack of Input Validation for `amount` Parameter,,the submission does not properly provide a demonstration of the issue with code snippets and reasoning,Unsatisfactory,,59
validation-672,Staking LP eth inflation,,the suggested mitigation already exists in _withdraw and _deposit functions,Unsatisfactory,,59
validation-156,Potential Reentrancy Vulnerability in claim Function,,the submission does not properly provide a demonstration of the issue with code snippets and reasoning,Unsatisfactory,,65
validation-161,Deposits and withdrawals are rounded down in the same direction which is incorrect.,,the submission does not properly provide a demonstration of the issue with code snippets and especially the reasoning,Unsatisfactory,,103
validation-165,Missing Check for Maximum Flash Loan Amount will let users loan more at a given loaning point.,,invalid,Unsatisfactory,,70
validation-166,Risk of Token Transfer Failures,,invalid as the return success is not checked here,Unsatisfactory,,81
validation-169,Possible precision loss in `BAL/USD` price from `AuraVault::_chainlinkSpot` calllculation of `price` could inflate rewards calculations,,the operation is intended to scale all prices to 1e18,Unsatisfactory,,91
validation-359,Missing deposit call in `_onIncreaseLever` function,,because it is being called in onFlashLoan function and deposits are handled there,Unsatisfactory,,62
validation-197, Missing Post-Flash Loan Balance Verification,,the submission does not properly provide a demonstration of the issue with code snippets and especially the reasoning and a proper POC,Unsatisfactory,,79
validation-203,Incorrect `owner` parameter in `withdraw` function,,the same confusion was emphasized in WP audit report. the implementation is correct,Unsatisfactory,,64
validation-185,Potential DoS as `Silo::withdraw` lacks balance checks before transferring `unstaked` assets to `owner` ,,pretty much inflated and does not hold any value,Unsatisfactory,,67
validation-208,Insufficient collateral check in `withdraw` function,,it´s calculated in the vault´s preview functions,Unsatisfactory,,69
validation-245,"CDPVault::withdraw() should transfer funds to the ""To"" address passed as parameter, not to msg.sender",,commented: https://github.com/code-423n4/2024-07-loopfi-validation/issues/245#issuecomment-2294829859,Unsatisfactory,,67
validation-219,There are no checks to ensure core parameters are set before core functions can be callable in `CDPVault`,,all params are already set in the constructor - the functions are setter only,Unsatisfactory,,58
validation-220,Missing maximum loan amount check in `flashloan` function,,commented: https://github.com/code-423n4/2024-07-loopfi-validation/issues/220#issuecomment-2296329152,Unsatisfactory,,75
validation-282,Unrestricted Token Recovery will Disrupt Reward Distribution (`ChefIncentivesController::recoverERC20`),,admin roles are assumed as  trusted,Unsatisfactory,,69
validation-238,Inaccurate Tracking of accountedRewards Leading to Potential Over-Distribution,,the submission does not properly provide a demonstration of the issue with code snippets and especially the reasoning,Unsatisfactory,,53
validation-239,Liquidator looking to liquidate a single unsafe position will be subject to paying liquidation penalty even if they don't own the position or lack `owner` permission in `CDPVault::liquidatePosition`.,,the submission does not properly provide a demonstration of the issue with code snippets and especially the reasoning - its not clear at all,Unsatisfactory,,109
validation-242,Protocol Disruption Caused by _convertToU128 Overflow,,technicaly true but overinflated as it doesnt reach the bar to be an audit report without providing reasons of large values,Unsatisfactory,,121
validation-249,Lack of Authorization Checks Allows for Malicious Flash Loan Attacks,,the submission does not properly provide a demonstration of the issue with code snippets and especially the reasoning,Unsatisfactory,,117
validation-258,Incorrect Liquidation Conditions will Lead to Unintended Liquidations (`CDPVault::liquidatePosition`),,"the function verifies         if (_isCollateralized(calcTotalDebt(debtData), wmul(position.collateral, spotPrice_), config.liquidationRatio))
, all the input above should be up-to-date to go further with slashing the user. if the suggested mitigation is performed, the protocol would be full of positions looking safe but actually underwater since the params are not updated.",Unsatisfactory,,117
validation-705,"DOS in `AuraVault::mint`, `AuraVault::deposit` and `AuraVault::claim` features due to lack of safeApprove to 0",,OOS --> [[L-7] safeApprove() is deprecated](https://github.com/code-423n4/2024-07-loopfi/blob/main/4naly3er-report.md#l-7-safeapprove-is-deprecated),Unsatisfactory,,70
validation-267,Incorrect Order of Operations in `PoolQuotaKeeperV3::updateRates()` May Lead to Financial Discrepancies,,"the submission states that ""the owner should be the address that owns the position from which the collateral is being withdrawn."" - this breaks the logic of permissions contract - allowance mechanism - hence should be incorrect",Unsatisfactory,,159
validation-280,Incorrect Rounding in Conversion Functions Allows Asset Drain (`AuraVault::withdraw` and `AuraVault::mint`),,commented: https://github.com/code-423n4/2024-07-loopfi-validation/issues/280#issuecomment-2295272456,Unsatisfactory,,116
validation-243,Unauthorized Contract Upgrades Due to Weak Authorization Checks,,OOS --> [[M-3] Centralization Risk for trusted owners](https://github.com/code-423n4/2024-07-loopfi/blob/main/4naly3er-report.md#m-3-centralization-risk-for-trusted-owners),Unsatisfactory,,73
validation-635,Reentrancy Vulnerability in liquidatePosition Function Leading to Potential Fund Draining,,the submission does not properly provide a demonstration of the issue with code snippets and reasoning,Unsatisfactory,,73
validation-299,Contract contains payable functions but no withdraw/sweep function,,the submission does not properly provide a demonstration of the issue with code snippets and reasoning,Unsatisfactory,,72
validation-30,Access restriction problem in `modifyCollateralAndDebt` function,,spam,Unsatisfactory,,102
validation-503,Potential Precision loss in interest calculations ,,the POC is not sufficient as the submission does not properly provide a demonstration of the issue with code snippets and reasoning - just random numbers,Unsatisfactory,,75
validation-304,Precision loss in debt Calc for CDPVault Repayments,,"without proper step by step poc, it seems the difference should be the interest - couldnt dup to any primary",Unsatisfactory,,151
validation-632,Liquidators Can Prevent Users from Making Their Positions Healthy During an Unpause,,repay has no whennotpaused modifier - hence the users are free to repay their debt,Unsatisfactory,,76
validation-422,`maxRedeem` and `maxWithdraw` Partially Comply with EIP-4626 And Should Also Return 0 When `locked = true`,,there is no EIP compliance as per the repo: https://github.com/code-423n4/2024-07-loopfi#eip-compliance-checklist,Unsatisfactory,,77
validation-636,Arbitrary `from` passed to `transferFrom` (or `safeTransferFrom`),,this is a phishing scenario in which the protocol is not responsible of,Unsatisfactory,,77
validation-331,Corruptible Upgradability Pattern,,the gaps are correct as there are 3 vars,Unsatisfactory,,48
validation-332,"The `JoinToken`, `upfrontToken` and `upFrontAmount` was not validated, allowing users to proceed even if there is no amount of the token specified",,the submission does not properly provide a demonstration of the issue with code snippets and especially the reasoning,Unsatisfactory,,48
validation-88,Guagev3 Voting mechanism is not decentralised,,the submission does not properly provide a demonstration of the issue with code snippets and reasoning,Unsatisfactory,,78
validation-34,Unrestricted Gas Consumption in updatePrice Call,,the submission does not provide any gas report with real numbers adhering the concern,Unsatisfactory,,71
validation-344,When exiting pool  a user can loss fund if poolId is incorrectly set,,insufficient proof - the submission does not properly provide a demonstration of the issue with code snippets and especially the reasoning,Unsatisfactory,,77
validation-352,ExitPool:: allows users to withdraw lesser single token if Balancer Pool is imbalanced,,it looks like it´s the callers responsibility - same like transferring to adress(0) - insufficient proof ,Unsatisfactory,,102
validation-506, Unchecked Call Return Value in Interest Rate Calculation Leads to Incorrect Interest Distribution,,invalid - spammish,Unsatisfactory,,80
validation-729,Race Condition in Price Validation can Lead to False Positives,,"as per the issue states as ""However, due to some issue (e.g., a revert in price fetching), safePrice remains unchanged."", the implementation is correct as it returns the latest safePrice. In addition, _getStatus() is not used for the latest price but the price to be fetched in the non-stale period",Unsatisfactory,,80
validation-217,Undercollateralized borrowers and those incurring bad debt cannot be liquidated while the system is in a paused state.,,the pausing system is to protect everyone even for the ones underwater as they might be there due to a failure/exploit in  pricing so the implementation should be accounted as valid,Unsatisfactory,,83
validation-381,interest are not applied to user when user  partial liquidates a position ,,the submission fails to demonstrate the issue even with a passing POC,Unsatisfactory,,78
validation-725,Lack of Zero-Address Check in mintProfit Function,,invalid,Unsatisfactory,,83
validation-4,Tokens can be lost when transferring to zero address,,invalid,Unsatisfactory,,65
validation-402,`Flashlender` contract is not compatible with ERC3156,,"as per the contest readme, no EIP compliance is enforced: https://github.com/code-423n4/2024-07-loopfi#eip-compliance-checklist",Unsatisfactory,,51
validation-244,Oracle Manipulation Vulnerability in PendleLPOracle,,the submission does not properly provide a demonstration of the issue with code snippets and reasoning,Unsatisfactory,,86
validation-410,Two separate functions responsible for converting to shares will cause weird errors,,insufficient proof provided - only code snippets are shown,Unsatisfactory,,61
validation-519,Lack of Reentrancy Protection in liquidatePosition Function Can Lead to Double-Liquidation,,the submission does not properly provide a demonstration of the issue with code snippets and reasoning,Unsatisfactory,,87
validation-426,Incorrect Order of Operations in `withdrawAndRepay()`,,i strongly believe that the suggested implementation breaks the lending logic and the existing implementation is correct as from no cure no pay point,Unsatisfactory,,125
validation-728,Inadequate Error Handling in ChainlinkOracle's getStatus Function,,The error will be caught at the catch block anyway as there is no error type defined.,Unsatisfactory,,88
validation-541,AuraVault is missing handling of extra reward,,i checked the live contract. the implementation is correct,Unsatisfactory,,89
validation-44,Unsafe transfer in `flashLoan` function,,invalid,Unsatisfactory,,83
validation-450,"Improper liquidation validation in `liquidatePosition` function, allows unauthorized liquidations and loss of collateral",,the submission doesnt acount for _isCollateralized function with correct liquidationRatio - then the position cant be liquidated ,Unsatisfactory,,123
validation-462,Reentrancy Attack,,spam,Unsatisfactory,,85
validation-289,Improper Permission Checks Allow Unauthorized Modifications of Collateral and Debt (`CDPVault::modifyCollateralAndDebt`),,the submission does not properly provide a demonstration of the issue with code snippets and reasoning,Unsatisfactory,,93
validation-95,Liquidators can prevent users from making their positions healthy after an unpause,,repay has no whennotpaused modifier - hence the users are free to repay their debt,Unsatisfactory,,95
validation-35,Incorrect Use of safePermit Instead of permit in ERC-20 Permit Functionality,,the implementation is correct,Unsatisfactory,,96
validation-662,"Deposit, mint and claim can be DOSed due to lack of safeApprove to 0",,OOS --> [[L-7] safeApprove() is deprecated](https://github.com/code-423n4/2024-07-loopfi/blob/main/4naly3er-report.md#l-7-safeapprove-is-deprecated),Unsatisfactory,,96
validation-717,Inconsistent Reentrancy Protection in the setPoolQuotaKeeper Function,,invalid,Unsatisfactory,,96
validation-488,"for extremely low debts additions, the quota revenue change may truncate to zero ",,the submission does not properly provide a demonstration of the issue with code snippets and especially the reasoning,Unsatisfactory,,40
validation-499,"UniswapV3:: ExactOutputParams and ExactInputParams swapParams recipient will be unable to receive ETH, if ETH is secondary or primary token to be swapped",,"When a transaction reverts, all ETH that was sent with the transaction is refunded back to the msg.sender automatically, not the recipient specified in the swap parameters.",Unsatisfactory,,90
validation-504,Lack of Validation in setParameter Allows Unsafe Configurations Leading to Potential Under-Collateralization,,admin/manager roles are assumed to be trusted,Unsatisfactory,,96
validation-507,Inconsistent State Updates in modifyCollateralAndDebt Function Can Lead to Financial Discrepancies,,the submission does not properly provide a demonstration of the issue with code snippets and especially the reasoning,Unsatisfactory,,110
validation-629, Lack of Adherence to Checks-Effects-Interaction Pattern in zapVestingToLp Function,,no proof,Unsatisfactory,,98
validation-365,updateLeverJoin():: opens door for possible under-collaterized pool when providing liquidity to Balancer pool.,,the submission does not properly provide a demonstration of the issue with code snippets and reasoning - only textbased submission where the flow is not provided,Unsatisfactory,,100
validation-711,Insufficient Validation of receiver Address in Flash Loan Functions Could Allow Funds to Be Sent to Invalid Addresses,,invalid,Unsatisfactory,,100
validation-150,"Lack of Access Control in `deposit`, `withdraw`, and `modifyCollateralAndDebt` Functions",,spam,Unsatisfactory,,101
validation-723,Centralization Risk Leads to Keeper-Exploitable Price Manipulation in BalancerOracle's update() Function,,admin roles are trusted,Unsatisfactory,,101
validation-515,Debt repayment logic yields entirely different results if the user chooses to repay <= quotaInterest instead of the whole accrued interest at once,,the submission misses to be readable and referring code snippet lines with reasoning - not validating this,Unsatisfactory,,191
validation-52,Incorrect slippage checks enforces max slippage on all users.,,"this is a feature request from the warden, not a vulnerability ",Unsatisfactory,,71
validation-264,`ChefIncentivesController` will prematurely stop reward distribution affecting stakers (`ChefIncentivesController::_updateEmissions`),,"this is highly unlikely, requires reward-emission-duration mismatch by the admin and the mitigation requires all the users claimed their rewards so that accountedRewards can grow - and moreover, if new rewards are added, it´s again oin admin´s able hands to start the emission ",Unsatisfactory,,103
validation-533,Functions flashLoan and creditFlashLoan needs internal state changes before interacting with external contracts,,the submission does not properly provide a demonstration of the issue with code snippets and especially the reasoning,Unsatisfactory,,120
validation-552,Zero-cost minting (due to inheritance from the implemented ERC4626 contract) could potentially give an attacker  a disproportionate share of StakingLPEth.sol,,the submission does not properly provide a demonstration of the issue with code snippets and especially the reasoning,Unsatisfactory,,79
validation-196,"PoolAction, PositionAction, and SwapAction uses Token Permission and does not check receiving token address is the exact token.",,invalid as the PermitParams struct does not contain the token being swapped unlike the referred finding in another contest,Unsatisfactory,,111
validation-569,PoolV3 does not comply with ERC4626 standard,,"as per the contest readme, no EIP compliance is enforced: https://github.com/code-423n4/2024-07-loopfi#eip-compliance-checklist",Unsatisfactory,,75
validation-571,Reentrancy in flashLoan and creditFlashLoan,,invalid,Unsatisfactory,,126
validation-721,Improper Validation of External Calls in repayCreditAccount Function,,spam,Unsatisfactory,,113
validation-579,DoS if user Redeem Exact Amount of the asset in stakingLPEth,,the tests use assertApproxEqAbs as dust amounts are assumed accepted,Unsatisfactory,,59
validation-246,Reentrancy Risk in PositionActionPendle Contract Due to Delegated Calls,,the submission does not properly provide the demonstration of the issue with code snippets and reasoning,Unsatisfactory,,118
validation-247,Logical Flaw in `_onIncreaseLever` Function of PositionActionPendle Contract,,the submission does not properly provide a demonstration of the issue with code snippets and reasoning,Unsatisfactory,,119
validation-608,variables inside `positions` is not updated,,"since _modifyPosition is called, all of them are updated. incorrect assumption",Unsatisfactory,,38
validation-609,PositionAction doesn't sanity check swap paths,,it looks like it´s the users responsibility especially for the ones interacting diirectly to the smart contract level without the protocol UI as the frontend will sanitize this,Unsatisfactory,,91
validation-248,PoolV3 repayCreditAccount Vulnerability: Missing Transfer Check,,the submission does not properly provide a demonstration of the issue with code snippets and reasoning of why the initial transfer was short,Unsatisfactory,,121
validation-612,updateRates at the PoolQuotaKeeperV3 is vulnerable to front-runs that harm the quota revenue amounts,,this can happen oranically - the risk is not provided properly in the submission,Unsatisfactory,,70
validation-642,Precision loss in the calculation of the `newAccRewardPerShare` inside the `_newRewards` function of the `ChefIncentivesController.sol` contract,,OOS --> [L-17] Possible rounding issue,Unsatisfactory,,31
validation-645,Potential Configuration Parameter Truncation Risk,,"technically trrue, and the params are alredy set in the constructor while the admin role assumed to be trusted",Unsatisfactory,,60
validation-28,It is possible to steal funds when borrowing,,the test simulates that the attacker has borrowed from the vault - no exploit,Unsatisfactory,,135
validation-663,Unrestricted Access to `_modifyPosition` function in `CDPVault` contract,,the submission does not properly provide a demonstration of the issue with code snippets and especially the reasoning,Unsatisfactory,,201
validation-677,Missing Check for borrowedAmount Exceeding availableToBorrow in lendCreditAccount Function,,the function checks totalBorrowed_ > _totalDebt.limit after uint128 totalBorrowed_ = _totalDebt.borrowed + borrowedAmountU128; basically doing the same thing,Unsatisfactory,,60
validation-712,Incorrect Borrowable Amount Calculation in edge case.,,"the proposed alteration breaks the availableToBorrow() function logic´s first condition which is commented as: If borrowing over `U_2` is prohibited, returns the amount that can be borrowed before `U_2` is reached",Unsatisfactory,,75
validation-730,Unable to withdraw in `PositionAction` contract,,the submission does not properly provide a demonstration of the issue with code snippets and especially the reasoning,Unsatisfactory,,47
validation-733,Inadequate Access Control in `setAllowed` Function,,invalid,Unsatisfactory,,64
validation-740,Potential loss of funds due to inflexible liquidation process in CDPVault,,"the liquidator should send exact amount - if not - it´s the liquidators responsibility, the actual root cause is not referred in this submission, hence not duplicating under any of the close related findings",Unsatisfactory,,89
validation-753,Lack of Vote Decay in GaugeV3 Contract,,"the submission doesnt refer to a specific vuln with a specific root cause - not validating in this condition, hoping to receive a PJQA comment ",Unsatisfactory,,202
validation-761,Preview Functions Don't Revert Appropriately According to ERC4626 standards,,"as per the contest readme, no EIP compliance is enforced: https://github.com/code-423n4/2024-07-loopfi#eip-compliance-checklist",Unsatisfactory,,72
validation-762,Rate Integrity Compromise During and After Frozen Periods in `GaugeV3.sol`,,this is the intended behaviour also as per the natspec for epochFrozen variable:     /// @notice Whether gauge is frozen and rates cannot be updated,Unsatisfactory,,59
validation-781,maxFlashLoan check is missing in function flashLoan and function creditFlashLoan,,the loan is checked in poolv3,Unsatisfactory,,82
validation-81,Mistakes done by deployer of `Flashlender.sol` aren't validated which leads to loss of funds.,,should be in QA report - does not hold the bar for being an audit report.,Unsatisfactory,,55
validation-82,Permission Overlap and Unauthorized Access Risks in Position Collateral and Debt Management,,the POC is providing the intended path - couldnt verify a vuln here,Unsatisfactory,,185
validation-92,Withdrawal Logic Mishandles Asset Transfers—May results in Incorrect Amounts Sent to User and Treasury,,the flow works as intended. couldt verify the issue without a proper POC not being wordy,Unsatisfactory,,154
validation-3,LoopFi PrelaunchPoints.sol Audit Report  ,,a report for previous audit report?,Unsatisfactory,,359
validation-101,Unauthorised call of the flashLoan function in the Flashlender contract,,the submission does not properly provide a demonstration of the issue with code snippets and especially the reasoning,Unsatisfactory,,419
validation-106, Inconsistent Flash Fee Calculation Method,,invalid,Unsatisfactory,,45
validation-108,Incorrect Calculation of Expected Liquidity in `expectedLiquidity` Function,,the submission does not properly provide a demonstration of the issue with code snippets and especially the reasoning,Unsatisfactory,,37
validation-109,Inconsistent Update of `availableLiquidityDelta` in `_deposit` Function,,insufficient proof- spam,Unsatisfactory,,45
validation-110,Inadequate Borrowable Limit Calculation,,insufficient proof- spam,Unsatisfactory,,31
validation-111,Incorrect Profit Calculation and Share Minting in `repayCreditAccount` Function,,insufficient proof- spam,Unsatisfactory,,82
validation-112, Missing Accrued Interest and Revenue Updates in _updateBaseInterest Function,,insufficient proof- spam,Unsatisfactory,,45
validation-113,Inconsistent Conversion from `uint128` to `uint256` in `_convertToU256` Function,,insufficient proof- spam,Unsatisfactory,,33
validation-114,Non-compliance with EIP-4626,,"as per the contest readme, no EIP compliance is enforced: https://github.com/code-423n4/2024-07-loopfi#eip-compliance-checklist",Unsatisfactory,,95
validation-116,Disabled ERC4626 Withdrawal and Redemption Functions,,this is the intended logic,Unsatisfactory,,40
validation-129,Upfront collateral not deposited into ERC4626 Vault causes loss of funds,,overinflated - does not hold value,Unsatisfactory,,133
validation-130,Incorrect Permission Check in `modifyCollateralAndDebt` Function,,this is the intended logic,Unsatisfactory,,62
validation-133,Lack of Contract Validation in Delegate Call,,insufficient proof- spam,Unsatisfactory,,34
validation-136,Missing Slippage Checks in Critical Functions,,marking the remaining as unsatisfactory due to spamming,Unsatisfactory,,70
validation-142,Division by Zero in deposit Function within the CDPVault contract,,invalid as tokenScale is not zero and implemented for the entire codebase,Unsatisfactory,,297
validation-143,Incorrect Update of Total Debt,,the implementation is correct,Unsatisfactory,,61
validation-149,Incorrect Index Handling for Asset Swaps in `balancerSwap` Function,,marking the remaining as unsatisfactory due to spamming,Unsatisfactory,,64
validation-151,Front-Running Risk in `updateEpoch` Function,,marking the remaining as unsatisfactory due to spamming,Unsatisfactory,,50
validation-154,Reward Controller Logic Bypassed in `modifyCollateralAndDebt` Function.,,invalid - spam,Unsatisfactory,,80
validation-158,Unsafe Position Allowed in modifyCollateralAndDebt Function,,invalid,Unsatisfactory,,105
validation-162,Incorrect Debt Reduction in liquidatePosition() Function,,the submission does not provide the root cause of the submission,Unsatisfactory,,82
validation-172,Incorrect `totalAllocPoint` Calculation in `batchUpdateAllocPoint` Leading to Inconsistent Pool Allocation Points,,marking the remaining as unsatisfactory due to spamming,Unsatisfactory,,50
validation-173, Incorrect Loop Termination in `setScheduledRewardsPerSecond` Function Due to Zero Offset,,marking the remaining as unsatisfactory due to spamming,Unsatisfactory,,63
validation-174,Updating pool's reward information doesn't consider users `rewardDebt `,,marking the remaining as unsatisfactory due to spamming,Unsatisfactory,,74
validation-175,Overflow in liquidatePositionBadDebt() Leading to System Insolvency,,the submission does not properly provide a demonstration of the issue with code snippets and especially the reasoning,Unsatisfactory,,75
validation-176,Negative Claimable Rewards Due to user.rewardDebt Exceeding Accumulated Rewards,,marking the remaining as unsatisfactory due to spamming,Unsatisfactory,,59
validation-179,Inconsistent Debt Tracking in `liquidatePosition()` Allows Total Debt to Deviate from Actual Debt,,not providing the root cause,Unsatisfactory,,82
validation-180,`_processEligibility` Always Returning True Causes Universal User Disqualification in `afterLockUpdate`,,marking the remaining as unsatisfactory due to spamming,Unsatisfactory,,54
validation-181,Possible Outdated Emission Rates in Reward Distribution,,marking the remaining as unsatisfactory due to spamming,Unsatisfactory,,43
validation-198,Incorrect Disqualification Time Assignment in `setDqTime` Function,,marking the remaining as unsatisfactory due to spamming,Unsatisfactory,,43
validation-199,Insecure Removal of User Earnings in `individualEarlyExit` Function Leading to Bypass of Early Exit Penalties,,marking the remaining as unsatisfactory due to spamming,Unsatisfactory,,50
validation-201,Potential Issue with Stale Price Data in _lockedUsdValue Function,,marking the remaining as unsatisfactory due to spamming,Unsatisfactory,,35
validation-202, Inconsistent Reward Emissions Due to Missing Emission Schedule Updates,,marking the remaining as unsatisfactory due to spamming,Unsatisfactory,,58
validation-209,Incorrect Slippage Validation in `setAutocompound` function and `setUserSlippage`,,marking the remaining as unsatisfactory due to spamming,Unsatisfactory,,45
validation-211,Inconsistent Vesting Penalty Implementation in vestTokens Function,,marking the remaining as unsatisfactory due to spamming,Unsatisfactory,,68
validation-212,Overly Restrictive Time Check in `individualEarlyExit` Function,,marking the remaining as unsatisfactory due to spamming,Unsatisfactory,,36
validation-234,Incorrect Minting of Shares in _deposit() Function Violates Expected Behavior,,invalid,Unsatisfactory,,65
validation-240,Incorrect Liquidity Update in _withdraw() Can Lead to Liquidity Underflow,,invalid - spammish,Unsatisfactory,,64
validation-250,Reward Controller Not Called in `modifyCollateralAndDebt`,,the submission does not properly provide a demonstration of the issue with code snippets and especially the reasoning,Unsatisfactory,,48
validation-251,Incorrect Total Debt Calculation in CDPVault Leading to Potential System Insolvency,,the submission does not properly provide a demonstration of the issue with code snippets and especially the reasoning,Unsatisfactory,,102
validation-252,Incorrect permission check allows unauthorized modification of collateral and debt,,invalid,Unsatisfactory,,62
validation-254,Incorrect Total Debt Reduction Handling in `repayCreditAccount()`,,spammish,Unsatisfactory,,68
validation-256,Incorrect Debt Reduction in `repayCreditAccount()` Due to Precision Loss,,spammish,Unsatisfactory,,59
validation-269,Arbitrary `from` passed to `transferFrom` (or `safeTransferFrom`),,no content,Unsatisfactory,,33
validation-270,Unsafe Casting,,no content,Unsatisfactory,,30
validation-271,Incorrect Assembly Shift Parameter Order,,insufficient proof,Unsatisfactory,,39
validation-272,Contract locks Ether without a withdraw function,,no content,Unsatisfactory,,26
validation-273,Return value of the function call is not checked,,invalid,Unsatisfactory,,39
validation-274,Storage Array Edited with Memory,,no content,Unsatisfactory,,34
validation-288,Inadequate Handling of Revert Reasons in _delegateCall in the BaseAction contract,,no value to the sponsors,Unsatisfactory,,113
validation-294,Inadequate Asset Check in deposit and mint Functions,,no real vulnerability provided - the codebase has no eip compliance ,Unsatisfactory,,72
validation-296,Over-Leverage Risk in depositWithReferral Function Due to Missing Asset Limit Checks,,no real vulnerability provided - the codebase has no eip compliance ,Unsatisfactory,,42
validation-297,Setting Credit Manager Debt Limit Allows Borrowing Large Amounts.,,admin roles are trusted,Unsatisfactory,,120
validation-298,Unbounded Credit Manager Debt Limit Allows Violation of Assets >= Borrowed Invariant,,admin/manager roles are assumed to be trusted,Unsatisfactory,,58
validation-326,Relying on Highly Risky Comparison Between `bytes32` and String Literals,,invalid,Unsatisfactory,,105
validation-341,Lack of Input Validation in setCreditManager Function within PoolQuotaKeeperV3 contract,,admin/manager roles are assumed to be trusted,Unsatisfactory,,95
validation-342,Based on implementation Borrow should never revert but this function makes externals call and can revert.,,invalid  as the opposite is already an issue,Unsatisfactory,,66
validation-345,Possible incorrect party being incentivized in `claim` function,,marking the remaining as unsatisfactory due to spamming,Unsatisfactory,,44
validation-346,Potential Slippage Risk in `claim` Function Due to Lack of `minAmountOut` Consideration,,marking the remaining as unsatisfactory due to spamming,Unsatisfactory,,58
validation-349,Inefficient Handling of Excess Repayments in CDPVault,,marking the remaining as unsatisfactory due to spamming,Unsatisfactory,,49
validation-350,Lack of Parameter Validation for ERC20 Token Recovery in the RecoverERC20 contract,,"since the function is behind the admin, it can be retried again - no harms",Unsatisfactory,,184
validation-354,Incorrect Total Debt Calculation in modifyPosition Function,,marking the remaining as unsatisfactory due to spamming,Unsatisfactory,,88
validation-355,Denial of Service Through Gas Exhaustion in withdraw Function,,no calculation provided - no proof,Unsatisfactory,,113
validation-356,Owner Misuse Vulnerability in `recoverERC20` Function,,admin roles are trusted,Unsatisfactory,,44
validation-361,recoverERC20 can be used as a backdoor,,admin roles are trusted,Unsatisfactory,,42
validation-362,Pausing `ChefIncentivesController` contract by the owner can unexpectedly block the users from claiming the reward,,this is the intention as pausing the reward distributor refers to a distressed situation,Unsatisfactory,,72
validation-364,Users can transfer non-intended tokens using Permit2 in TransferAction,,the submission does not refer to the actual root cause here,Unsatisfactory,,74
validation-370,"Positions may become undercollateralized without detection, increasing the risk of bad debt for the protocol ",,marking the remaining as unsatisfactory due to spamming,Unsatisfactory,,55
validation-371,recoverERC20() can be used as a backdoor by the owner to retrieve rewardsToken ,,admin roles are trusted,Unsatisfactory,,40
validation-374,Inconsistent Pool State Due to Separate Profit Minting and Repayment Operations,,marking the remaining as unsatisfactory due to spamming,Unsatisfactory,,71
validation-384,Insufficient Cooldown Duration Validation in Staking Functions,,marking the remaining as unsatisfactory due to spamming,Unsatisfactory,,52
validation-387, function _getAuraSpot() in the Auravault uses  latestRoundData whose is not validated before use,,OOS --> [[M-4] Chainlink's latestRoundData might return stale or incorrect results](https://github.com/code-423n4/2024-07-loopfi/blob/main/4naly3er-report.md#m-4-chainlinks-latestrounddata-might-return-stale-or-incorrect-results),Unsatisfactory,,105
validation-394,Unsafe Withdrawal in `CDPVault.withdraw()` Allows Undercollateralized Positions,,the submission does not properly provide a demonstration of the issue with code snippets and especially the reasoning,Unsatisfactory,,56
validation-399,`addQuotaToken` function allows non-quoted tokens to be added,,marking the remaining as unsatisfactory due to spamming,Unsatisfactory,,64
validation-404,Griefing attack possible by continuous deposit and withdrawal,,spam,Unsatisfactory,,57
validation-408,Dust Debt After Liquidation Allows Debt Floor Bypass,,the submission does not properly provide a demonstration of the issue with code snippets and especially the reasoning,Unsatisfactory,,79
validation-458,`PoolV3::maxWithdraw` and `PoolV3::maxWithdraw` are not ERC4626 compliant due to missing check for lock,,"as per the contest readme, no EIP compliance is enforced: https://github.com/code-423n4/2024-07-loopfi#eip-compliance-checklist",Unsatisfactory,,275
validation-461,`StakingLPEth::maxWithdraw` and `StakingLPEth::maxRedeem` are not ERC-4626 compliant,,"as per the contest readme, no EIP compliance is enforced: https://github.com/code-423n4/2024-07-loopfi#eip-compliance-checklist",Unsatisfactory,,224
validation-486,Loss of Funds Due to Incorrect Bad Debt Handling in `liquidatePositionBadDebt()`,,the submission does not properly provide a demonstration of the issue with code snippets and especially the reasoning,Unsatisfactory,,96
validation-487,Liquidation of Undercollateralized Positions May Fail and Revert,,the submission does not properly provide a demonstration of the issue with code snippets and especially the reasoning,Unsatisfactory,,49
validation-498,Liquidator Receives Full Collateral Regardless of Repay Amount,,not validating the issues of this warden as they spam the contest,Unsatisfactory,,58
validation-502,Liquidation of Bad Debt Positions Fails to Increase Pool Balance by Repayment Amount,,not validating the issues of this warden as they spam the contest,Unsatisfactory,,80
validation-530,Insufficient Validation of `repayAmount` Parameter in `liquidatePositionBadDebt()`,,not validating the issues of this warden as they spam the contest,Unsatisfactory,,51
validation-540,"Due to lack of validation in the Flashlender#`flashLoan()`, a borrower can borrow the amount of a given `token` beyond the maximum borrowable amount of the given `token`",,the validation is done in pool.lendCreditAccount,Unsatisfactory,,141
validation-554,Borrower can liquidate himself to gain liquidation profit,,barely no content,Unsatisfactory,,25
validation-556,StakingLPEth can be arbitraged by any users,,the submission does not properly provide a demonstration of the issue with code snippets and especially the reasoning,Unsatisfactory,,48
validation-560,Incorrect StablePool BPT price calculation,,the submission does not properly provide a demonstration of the issue with code snippets and especially the reasoning,Unsatisfactory,,49
validation-561,Permit signature does not check the token is underlying token or not,,invalid,Unsatisfactory,,95
validation-564,Innocent users always repay debt failed because wrong debt amount calculation,,the submission does not properly provide a demonstration of the issue with code snippets and especially the reasoning of why the received tokens are fewer,Unsatisfactory,,61
validation-565,Users can gain profits from PoolAction because wrong debt ,,the submission does not properly provide a demonstration of the issue with code snippets and especially the reasoning of why the received tokens are fewer,Unsatisfactory,,52
validation-566,Wrong insolvent calculation can cause users borrow more or avoid be liquidated,,insufficient proof,Unsatisfactory,,61
validation-567,Users can be liquidated earlier because wrong underlying position calculation,,the submission does not properly provide a demonstration of the issue with code snippets and especially the reasoning,Unsatisfactory,,59
validation-578,Inconsistent Collateral and Debt Updates in `modifyCollateralAndDebt()` ,,not validating the issues of this warden as they spam the contest,Unsatisfactory,,92
validation-582,"""_penaltyInfo"" can revert due to no check on ""vestDuration""",,the submission does not properly provide a demonstration of the issue with code snippets and especially the reasoning,Unsatisfactory,,94
validation-583,wrong value of MAX_SLIPPAGE.,,no content,Unsatisfactory,,27
validation-584,Inconsistent Collateral Accounting in `modifyCollateralAndDebt()` Jeopardizes Vault Integrity,,not validating the issues of this warden as they spam the contest,Unsatisfactory,,68
validation-621,Flashloan  should check for maxFlashloan,,it checks at poolv3 contract,Unsatisfactory,,48
validation-630,Denial of Service to Users Who wants to Work with Zero Slippage,,it´s a feature request - no DOS here - inflated and partly invalid,Unsatisfactory,,81
validation-637, _previewReward  can revert.,,no content,Unsatisfactory,,33
validation-649,Anyone can change  the slippage ,,"yes, the intended mechanism for the callers",Unsatisfactory,,42
validation-692,Insecure Access Control in CDPVault.sol,,the submission does not properly provide a demonstration of the issue with code snippets and especially the reasoning,Unsatisfactory,,51
validation-694,Unhandled Exceptions in Liquidation Process,,the submission does not properly provide a demonstration of the issue with code snippets and especially the reasoning,Unsatisfactory,,39
validation-699,Exposure to Unpriceable Tokens in CDPVault.sol,,spammish,Unsatisfactory,,60
validation-700,No refund to the user if the amount paid is greater than the repayment amount,,spammish,Unsatisfactory,,30
validation-720,Lack of Input Validation in Flashlender.sol,,spammish,Unsatisfactory,,53
validation-724,Unchecked Return Values in Flashlender.sol,,spammish,Unsatisfactory,,52
validation-73,Unconditional Disqualification Due to Fixed Return Value in `_processEligibility`,,invalid,Unsatisfactory,,64
validation-738,No array length check in multisend,,the submission does not properly provide a demonstration of the issue with code snippets and especially the reasoning,Unsatisfactory,,41
validation-74,Incorrect Reward Calculation When Deposited Rewards Equals Accounted Rewards,,invalid,Unsatisfactory,,183
validation-746,PoolV3.sol is not fully up to EIP-4626's specification,,"as per the contest readme, no EIP compliance is enforced: https://github.com/code-423n4/2024-07-loopfi#eip-compliance-checklist",Unsatisfactory,,51
validation-759,Unlimited Token Generation Exploit in PoolV3.sol,,admin/manager roles are assumed to be trusted,Unsatisfactory,,47
validation-764,Hardcoded Timestamp Values can introduce rounding errors,,the submission does not properly provide a demonstration of the issue with code snippets and especially the reasoning,Unsatisfactory,,47
validation-771,Unrestricted Withdraw Function in Silo.sol,,spammish,Unsatisfactory,,57
validation-774,No Access Control on Contract Initialization in Silo.sol,,invalid,Unsatisfactory,,40
validation-777,Improper Deletion in Array IN VaultRegistry.sol,,invalid,Unsatisfactory,,64
validation-778,Inefficient Removal of Vaults in VaultRegistry.sol,,invalid,Unsatisfactory,,53
validation-83,Unauthorized Access to setDefaultRelockTypeIndex Function in the MultiFeeDistribution contract,,invalid - GPT,Unsatisfactory,,199
validation-84,Unauthorised Access to setAutocompound Function in the MultiFeeDistribution,,invalid - GPT,Unsatisfactory,,236
validation-85,Unauthorized Access to setUserSlippage Function in the MultiFeeDistribution contract,,invalid - GPT,Unsatisfactory,,227
validation-86,Unauthorized Access to toggleAutocompound Function in the MultiFeeDistribution contract,,invalid - GPT,Unsatisfactory,,219
validation-87,Unauthorized Access to setRelock Function in the MultiFeeDistribution contract,,invalid - GPT,Unsatisfactory,,196
validation-93,Incorrect Calculation of Discounted Price in liquidatePosition Function,,invalid,Unsatisfactory,,29